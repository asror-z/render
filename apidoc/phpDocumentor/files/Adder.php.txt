<?php

/**
 *
 *
 * Author:  Asror Zakirov
 * https://www.linkedin.com/in/asror-zakirov
 * https://github.com/asror-z
 *
 */

namespace zetsoft\service\smart;

use PhpOffice\PhpSpreadsheet\Shared\OLE\PPS\Root;
use Symfony\Component\Filesystem\Filesystem;
use zetsoft\dbitem\ALL\ZAppItem;
use zetsoft\models\drag\DragApp;
use zetsoft\models\page\PageApp;
use zetsoft\service\process\SymfonyProcess;
use zetsoft\system\Az;
use zetsoft\system\helpers\ZFileHelper;
use zetsoft\system\helpers\ZStringHelper;
use zetsoft\system\kernels\ZFrame;
use Symfony\Component\Process\Process;
use function Spatie\SslCertificate\length;

/**
 * Class Adder
 * @package zetsoft\service\smart
 *
 * yangi proyekt yaratish, klon qilish servisi
 *
 */
class Adder extends ZFrame
{

    #region Vars

    /**
     * @var $data
     * Proyektni fayllarini o'zida jamlash uchun o'zgaruvchi
     */
    public $data;


    /**
     * @var $rootDir
     * Proyekt joylashgan direktoriya uchun o'zgaruvchi
     */
    public $rootDir;

    /**
     * @var $newName
     * Yaratilayotgan proyektni nomi uchun o'zgaruvchi
     */
    public $newName;

    /**
     * @var $oldName
     * nusxa olinadigan proyekt nomi uchun o'zgaruvchi
     */
    public $oldName;

    /**
     * @var $domain
     * yangi proyekga qo'shimcha domain yaratish uchun o'zgaruvchi
     */
    public $domain;

    //public $branch;

    /**
     * @var $dbname
     * yaratilayotgan yangi proyektga DB uchun o'zgaruvchi
     */
    public $dbname = 'db_dilshod_01';

    public $theme_dbname = 'db41';
    public $theme_dbUsername;
    public $theme_dbpassword = 'serverpass1234';

    /**
     * @var $confTpl
     * yaratilayotgan proyekt vhost fayliga shablon uchun o'zgaruvchi
     */
    private $confTpl;
    public $extract_path = 'D:/Develop/Projects/ALL/backup/extract';
    #endregion

    #region Const

    public const mode = [
        'create' => 'create',
        'remove' => 'remove',
        'clone' => 'clone',
        'extract' => 'extract',
        'test' => 'test',
    ];

    public const path = [
        'nginxPath' => 'D:/Develop/Projects/ALL/asrorz/zetsoft/hoster',
        'sampleVhosts' => 'D:/Develop/Projects/ALL/asrorz/zetsoft/hoster/sample/vhosts.conf',
        'extractPath' => 'D:/Develop/Projects/ALL/backup/extract',
        'profilePath' => 'D:/Develop/Projects/ALL/asrorz/zetsoft/hoster/profile/Profiles',
        'testRootDir' => 'D:/Develop/Projects/ALL/asrorz/zettest',
        'recyclePath' => 'D:/Develop/Projects/ALL/history/recycle/',
    ];


    #endregion

    public $appName = 'dilshod';
    public $theme = 'eyuf';
    public $app;

    public $domains = [];

    public $createdFiles = [];

    public $confFolders = [
        'custom' => '/hoster/domain/custom/',
        'ashop' => '/hoster/domain/release/',
        'zetsoft' => '/hoster/domain/zetsoft/',
        'zoft' => '/hoster/domain/zoftapp/',

        'days1' => '/hoster/history/days1/',
        'days5' => '/hoster/history/days5/',
        'days30' => '/hoster/history/days30/',
        'hour1' => '/hoster/history/hour1/',
        'hour6' => '/hoster/history/hour6/',
        'hour12' => '/hoster/history/hour12/',
        'mins30' => '/hoster/history/mins30/',
        'realtime' => '/hoster/history/realtime/',

        'mains' => '/hoster/reviews/mains/',
        'rev01' => '/hoster/reviews/rev01/',
        'rev02' => '/hoster/reviews/rev02/',
        'rev03' => '/hoster/reviews/rev03/',

    ];
    #region Core
//    public function init()
//    {
//        parent::init(); // TODO: Change the autogenerated stub
//        $this->confTpl = self::path['sampleVhosts'];
//    }
    public function init()
    {
        $this->dbname = 'db_' . $this->appName . '_01';
        $this->app = PageApp::find()
            ->where([
                'name' => $this->appName
            ])->one();
        if (empty($this->app))
            Az::error('This project not found in DB');

    }

    public function run()
    {
        $this->createCmd();
    }

    public function appClone(){
        Az::debug('Cloning app files...');
        $this->cloneFolders();
        $this->createAppConf();
        $this->createAppIndex();
        Az::debug('Creating Nginx configurations...');
        $this->nginxConf();
        Az::debug('Add domain names to host...');
        $this->updateHosts();
        Az::debug('Creating env for the new app...');
        $this->createEnv();
        Az::debug('Creating connectin file to the new app...');
        $this->createConnectionFile();
        Az::debug('Cloning DB...');
        $this->createDb();
        Az::debug('Check Nginx and restart...');
        $this->restartNginx();
        Az::debug('The new app creating successfully!');

    }



    public function createCmd()
    {
        $theme = Root . "/configs/cmd/{$this->theme}.php";
        $newApp = Root . "/configs/cmd/{$this->appName}.php";
        copy($theme, $newApp);
        $this->createdFiles[] = $newApp;
    }

    public function cloneFolders(){
         $theme_path = Root . '/webhtm/thm/';
         $appPath = Root . '/webhtm/apps/';
         $filesys = new Filesystem();

         $filesys->mirror($theme_path . $this->theme, $appPath . $this->appName);

    }

    public function createAppIndex(){
        $path = Root . '/exweb/';
        $filesys = new Filesystem();

        $filesys->mirror($path . $this->theme, $path . $this->appName);
        $content = file_get_contents($path . $this->theme . '/index.php');
        $content = strtr($content, [
            $this->theme => $this->appName
        ]);

        $index = fopen( $path . $this->appName . '/index.php', "w");
        fwrite($index, $content);
        fclose($index);

    }

    public function createAppConf(){
        $path = Root . '/configs/web/';
        $content = file_get_contents($path . $this->theme . '.php');
        $index = fopen( $path . $this->appName . '.php', "w");
        fwrite($index, $content);
        fclose($index);
    }

    public function createEnv(){
        $path = Root . '/configs/env/';
        $content = file_get_contents($path . $this->theme . '.env');
        $arr = explode( "\r\n", $content);
        $new_content = null;
        foreach ($arr as $line)
            switch (true) {
                case ZStringHelper::startsWith($line, 'dbName'):
                    $this->theme_dbname = strtr($line, [
                        'dbName = ' => ''
                    ]);
                    $new_content .= 'dbName = db_' . $this->appName . '_01' . EOL;
                    break;
                case ZStringHelper::startsWith($line, 'appTitle'):
                    $new_content .= 'appTitle = ' . $this->appName . EOL;
                    break;
                case ZStringHelper::startsWith($line, 'appVersion'):
                    $new_content .= 'appTitle = 1.0.0' . EOL;
                    break;
                case ZStringHelper::startsWith($line, 'dbUsername'):
                    $this->theme_dbUsername = strtr($line, [
                        'dbUsername = ' => ''
                    ]);
                    $new_content .= $line . EOL;
                    break;
                case ZStringHelper::startsWith($line, 'dbPassword'):
                    $this->theme_dbpassword = strtr($line, [
                        'dbPassword = ' => ''
                    ]);
                    $new_content .= $line . EOL;
                    break;
                default :
                    $new_content .= $line . EOL;
            }


        $conf = fopen( $path . $this->appName . '.env', "w");
        fwrite($conf, $new_content);
        fclose($conf);
        Az::debug($this->appName . '.env file has created.');
    }
    /**
     *
     * Boshlang'ich db yaratish
     * @throws \yii\db\Exception
     *
     */
    public function createDb()
    {
        $this->dbname = 'db_' . $this->appName . '_01';
        $this->dropDb();
        $this->createSql();
        $sql = '
        CREATE DATABASE ' . $this->dbname;

        \Yii::$app->db->createCommand($sql)->execute();
        Az::debug($sql, 'executed SQL: ');
        $this->restoreDb();


    }

    public function createSql($path = Root . '/render/sql/test.sql'){
        $cmd_path = Root . '\\excmd\\';
        $content = file_get_contents($cmd_path .'pgdump');
        $content = strtr($content, [
             '{serverPassword}' => $this->theme_dbpassword,
             '{serverIP}' => '10.10.3.207',
             '{dbname}' => $this->theme_dbname,
             '{filePath}' => $path
        ]);

        $index = fopen( $cmd_path . $this->appName . '.cmd', "w");
        fwrite($index, $content);
        fclose($index);

        $cmd = [$cmd_path . $this->appName . '.cmd'];
        $a = $proc = new SymfonyProcess();
        $proc->run($cmd,
            function ($output, $pid){
                echo $output;
            },
            function ($output, $pid){
                vd('Error on creating sql file |' . $output);
            },);

        unlink($cmd_path . $this->appName . '.cmd');
    }

    public function restoreDb($path = Root . '/render/sql/test.sql'){
        $cmd_path = Root . '\\excmd\\';
        $content = file_get_contents($cmd_path .'dbrestore');
        $content = strtr($content, [
            '{serverPass}' => $this->theme_dbpassword,
            '{dbname}' => $this->dbname,
            '{filePath}' => $path
        ]);
        $index = fopen( $cmd_path . $this->appName . '.cmd', "w");
        fwrite($index, $content);
        fclose($index);

        $cmd = [$cmd_path . $this->appName . '.cmd'];
        $a = $proc = new SymfonyProcess();
        $proc->run($cmd,
            function ($output, $pid){
                echo $output;
            },
            function ($output, $pid){
                vd('Error on creating sql file |' . $output);
            },);

        unlink($cmd_path . $this->appName . '.cmd');
        unlink($path);
    }

    public function createConnectionFile(){
        $path = Root . '/configs/data/';
        $contents = file_get_contents($path . $this->theme . '.php');
        $conf = fopen($path . $this->appName . '.php', "w");
        fwrite($conf, $contents);
        fclose($conf);
        Az::debug($this->appName . '.php has created.');
    }

    /**
     * DB o'chirish
     * @throws \yii\db\Exception
     */
    public function dropDb()
    {
        $beforeDrop = '
            SELECT pg_terminate_backend(pg_stat_activity.pid)
            FROM pg_stat_activity
            WHERE pg_stat_activity.datname = \'' . $this->dbname . '\'
              AND pid <> pg_backend_pid();        
        ';
        \Yii::$app->db->createCommand($beforeDrop)->execute();
        Az::debug($beforeDrop, 'executed SQL: ');

        $beforeSql = 'DROP DATABASE IF EXISTS ' . $this->dbname . '; ';
        \Yii::$app->db->createCommand($beforeSql)->execute();
        Az::debug($beforeSql, 'executed SQL: ');
    }

    /**
     * DBda tablitsalar yaratish
     *
     */
    public function fillDb()
    {
        $script = $this->rootDir . '/excmd/asrorz.php';
        $params = 'cruds/run/apply --app=' . $this->newName;
        $phpcmd = 'php ' . $script . ' ' . $params;

        Az::debug($phpcmd, 'command to launch: ');
        $r = shell_exec($phpcmd);
        Az::debug($phpcmd, 'command executed: ');
        Az::debug($r, 'command result: ');

    }

    /**
     * page/run --app comandasini chaqirish
     *
     */
    public function callPageRunCmd()
    {
        $script = $this->rootDir . '/excmd/asrorz.php';
        $params = 'cores/page/run --app=' . $this->newName;
        $phpcmd = 'php ' . $script . ' ' . $params;
        Az::debug($phpcmd, 'command to launch: ');
        $r = shell_exec($phpcmd);
        Az::debug($phpcmd, 'command executed: ');
        Az::debug($r, 'command result: ');
    }

    /**
     * vhost conf va appssl directory qo'shish
     * @param bool $revert
     *
     */
    public function updateNgnix($revert = false)
    {
        global $boot;

        if ($this->domain) {
            $file = self::path['nginxPath'] . '/custom/' . "$this->domain.conf";

            if ($revert) {
                $trashDir = self::path['nginxPath'] . "/custom/.trash";
                $boot->mkdir($trashDir);
                copy($file, $trashDir . "/$this->domain.conf");
                $boot->rmfile($file);
                Az::debug($file, 'config removed: ');
                return 0;
            }

            $content = file_get_contents($this->confTpl);
            $replace = [
                '{domain}' => "$this->domain",
                '{app}' => $this->domain,
                '{root}' => "d:/Develop/Projects/ALL/backup/zetsoft/",
            ];
            $content = strtr($content, $replace);

            file_put_contents($file, $content);
        }

        $history_sub_dirs = glob(self::path['nginxPath'] . '/history/*', GLOB_ONLYDIR);
        foreach ($history_sub_dirs as $dir) {
            $innerFolder = substr($dir, 54);
            $file = self::path['nginxPath'] . "/history/$innerFolder/$this->newName.$innerFolder.uz.conf";

            if ($revert) {
                $trashDir = "$dir/.trash";
                if (!file_exists($trashDir))
                    $boot->mkdir($trashDir);
                if (file_exists($file)) {
                    copy($file, $trashDir . "/$this->newName.$innerFolder.uz.conf");
                }
                $boot->rmfile($file);
                continue;
            }

            $content = file_get_contents($this->confTpl);
            $replace = [
                '{domain}' => "$this->newName.$innerFolder.uz",
                '{app}' => $this->newName,
                '{root}' => "d:/Develop/Projects/ALL/history/$innerFolder/zetsoft/",
            ];
            $content = strtr($content, $replace);

            file_put_contents($file, $content);
        }

        $folders = ['backup', 'extract', 'zetsoft', 'zoftapp'];

        foreach ($folders as $folder) {

            if ($folder === 'zoftapp') $file = self::path['nginxPath'] . "/$folder/$this->newName.zoft.uz.conf";
            else $file = self::path['nginxPath'] . "/$folder/$this->newName.$folder.uz.conf";

            if ($revert) {
                $trashDir = self::path['nginxPath'] . "/$folder/.trash";
                if (!file_exists($trashDir))
                    $boot->mkdir($trashDir);
                if (file_exists($file)) {
                    if ($folder === 'zoftapp') copy($file, $trashDir . "/$this->newName.zoft.uz.conf");
                    else copy($file, $trashDir . "/$this->newName.$folder.uz.conf");
                }
                $boot->rmfile($file);
                Az::debug($file, 'config removed: ');
                continue;
            }

            $content = file_get_contents($this->confTpl);
            $replace = [
                '{domain}' => $folder === 'zoftapp' ? "$this->newName.zoft.uz" : "$this->newName.$folder.uz",
                '{app}' => $this->newName,
                '{root}' => $folder === 'backup' ? "d:/Develop/Projects/ALL/backup/zetsoft/" : "d:/Develop/Projects/ALL/asrorz/zetsoft/",
            ];
            $content = strtr($content, $replace);

            file_put_contents($file, $content);
        }

        $this->checkNginx();

    }

    /**
     *
     * file sistemasini yaratish
     * @param null $mode
     *
     */
    private function load($mode = null)
    {
        $isTest = false;

        if ($isTest)
            $this->rootDir = self::path['testRootDir'];
        else $this->rootDir = Root;

        // configs/cmd +
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->templatePath = "/configs/cmd/";
            $item->generate = "/configs/cmd/$this->newName.php";
            $item->generatePath = "/configs/cmd";

            $item->affectFileOnly = true;

            if ($mode === self::mode['clone']) {
                $item->template = $this->oldName . '.php';
            }

            return $item;
        };

        // configs/data +
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->templatePath = "/configs/data/";
            $item->generate = "/configs/data/$this->newName.php";
            $item->generatePath = "/configs/data";
            $item->replace = [
                '{app}' => $this->dbname,
            ];

            $item->affectFileOnly = true;

            if ($mode === self::mode['clone']) {
                $item->template = $this->oldName . '.php';
            }

            return $item;
        };

        // configs/env +
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->template = "Azk.env";
            $item->templatePath = "/configs/env/";
            $item->generate = "/configs/env/$this->newName.env";
            $item->generatePath = "/configs/env";
            $item->replace = [
                '{appTitle}' => $this->newName,
                '{appVersion}' => '1.0',
            ];

            $item->affectFileOnly = true;

            if ($mode === self::mode['clone']) {
                $upperTplApp = strtoupper($this->oldName);
                $item->template = $this->oldName . '.env';
                $item->replace = [
                    $upperTplApp => strtoupper($this->newName),
                ];
            }

            return $item;
        };

        // configs/web +
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->templatePath = "/configs/web/";
            $item->generate = "/configs/web/$this->newName.php";
            $item->generatePath = "/configs/web";
            $item->affectFileOnly = true;

            if ($mode === self::mode['clone']) {
                $item->template = $this->oldName . '.php';
            }

            return $item;
        };

        // zetsoft/blocks +
        $blocks_sub_dirs = glob($this->rootDir . '/blocks/*', GLOB_ONLYDIR);
        if (count($blocks_sub_dirs) > 0) {
            foreach ($blocks_sub_dirs as $dir) {
                $temp_dir = substr($dir, 38);
                $items[] = function (ZAppItem $item) use ($dir, $mode, $temp_dir) {
                    $item->generate = "$temp_dir/$this->newName/.gitkeep";
                    $item->generatePath = "$temp_dir/$this->newName";

                    if ($mode === self::mode['clone']) {
                        $item->dirOnly = true;
                        if (file_exists("$dir/$this->oldName")) $item->sourceDir = "$temp_dir/$this->oldName";
                        else $item->sourceDir = '';
                    }

                    return $item;
                };
            }
        }

        // cncmd +
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->generate = "/cncmd/$this->newName/.gitkeep";
            $item->generatePath = "/cncmd/$this->newName";

            if ($mode === self::mode['clone']) {
                $item->dirOnly = true;
                $item->sourceDir = "/cncmd/$this->oldName";
            }

            return $item;
        };

        // cnweb +
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->generate = "/cnweb/$this->newName/.gitkeep";
            $item->generatePath = "/cnweb/$this->newName";

            if ($mode === self::mode['clone']) {
                $item->dirOnly = true;
                $item->affectFileToo = true;
                $item->sourceDir = "/cnweb/$this->oldName";
                $item->replace = [
                    $this->oldName => $this->newName
                ];
            }

            return $item;
        };

        $items[] = function (ZAppItem $item) use ($mode) {
            $item->generate = "/cnweb/$this->newName/test/TestController.php";
            $item->generatePath = "/cnweb/$this->newName/test";
            $item->template = "TestController.php";
            $item->templatePath = "/cnweb/eyuf/cores/";
            $item->replace = [
                'eyuf\cores' => "$this->newName\\test"
            ];

            if ($mode === self::mode['clone']) {
                $item->dirOnly = true;
                $item->sourceDir = "/cnweb/$this->oldName";
            }

            return $item;
        };

        // models
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->generate = "/models/$this->newName/.gitkeep";
            $item->generatePath = "/models/$this->newName";

            if ($mode === self::mode['clone']) {
                $item->dirOnly = true;
                $item->sourceDir = "/models/$this->oldName";
                $item->replace = [
                    $this->oldName => $this->newName
                ];
            }

            return $item;
        };

        $items[] = function (ZAppItem $item) use ($mode) {
            $item->templatePath = "/excmd/";
            $item->generate = "/excmd/$this->newName/asrorz.php";
            $item->generatePath = "/excmd/$this->newName";
            $item->replace = [
                '{app}' => $this->newName,
            ];

            if ($mode === self::mode['clone']) {
                $item->template = 'asrorz.php';
                $item->templatePath = "/excmd/$this->oldName/";
                $item->replace = [
                    $this->oldName => $this->newName
                ];
            }

            return $item;
        };

        // zetsoft/dbcore
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->generate = "/dbcore/$this->newName/.gitkeep";
            $item->generatePath = "/dbcore/$this->newName";

            if ($mode === self::mode['clone']) {
                $item->dirOnly = true;
                $item->sourceDir = "/dbcore/$this->oldName";
                $item->replace = [
                    $this->oldName => $this->newName
                ];
            }

            return $item;
        };

        // zetsoft/dbdata
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->generate = "/dbdata/$this->newName/.gitkeep";
            $item->generatePath = "/dbdata/$this->newName";

            if ($mode === self::mode['clone']) {
                $item->dirOnly = true;
                $item->sourceDir = "/dbdata/$this->oldName";
                $item->replace = [
                    $this->oldName => $this->newName
                ];

            }

            return $item;
        };

        // zetsoft/dbitem
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->generate = "/dbitem/$this->newName/.gitkeep";
            $item->generatePath = "/dbitem/$this->newName";

            if ($mode === self::mode['clone']) {
                $item->dirOnly = true;
                $item->sourceDir = "/dbitem/$this->oldName";
            }

            return $item;
        };

        $items[] = function (ZAppItem $item) use ($mode) {
            $item->templatePath = "/exweb/";
            $item->generate = "/exweb/$this->newName/index.php";
            $item->generatePath = "/exweb/$this->newName";

            $item->replace = [
                '{app}' => $this->newName,
            ];

            if ($mode === self::mode['clone']) { // todo check clone index
                $item->dirOnly = true;
                $item->sourceDir = "/exweb/$this->oldName";
            }

            return $item;
        };

        // former
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->generate = "/former/$this->newName/.gitkeep";
            $item->generatePath = "/former/$this->newName";

            if ($mode === self::mode['clone']) {
                $item->dirOnly = true;
                $item->sourceDir = "/former/$this->oldName";
                $item->replace = [
                    $this->oldName => $this->newName
                ];
            }

            return $item;
        };

        // inserts
        /*$items[] = function (AppItem $item) use ($mode) {
            $item->generate = "/inserts/$this->app/.gitkeep";
            $item->generatePath = "/inserts/$this->app";
//            $item->templatePath = "/inserts/Azk/All";

            if ($mode === self::mode['clone']) {
                $item->dirOnly = true;
                $item->sourceDir = "/inserts/$this->oldName";
            }

            $item->replace = [
                $this->oldName => $this->app
            ];

            return $item;
        };

        $inserts_azk_all_sub_dirs = glob($this->rootDir . '/inserts/Azk/All/*');
        if (count($inserts_azk_all_sub_dirs) > 0) {
            foreach ($inserts_azk_all_sub_dirs as $dir) {
                $temp_dir = substr($dir, 55);
                $items[] = function (AppItem $item) use ($dir, $this->app, $mode, $temp_dir) {
                    $item->generate = "/inserts/$this->app/.gitkeep";
                    $item->generatePath = "/inserts/$this->app";
                    $item->template = $temp_dir;
                    $item->templatePath = "/inserts/Azk/All/";

                    $item->replace = [
                        '{app}' => $this->app
                    ];

                    return $item;
                };
            }
        }

        $inserts_branch_sub_dirs = $branch ? ZFileHelper::findFiles($this->rootDir . '/inserts/Azk/' . $branch) : ZFileHelper::findFiles($this->rootDir . '/inserts/Azk/corporate');
        $temp_path = $branch ? "/inserts/Azk/$branch/" : "/inserts/Azk/corporate/";
        if (count($inserts_branch_sub_dirs) > 0) {
            foreach ($inserts_branch_sub_dirs as $dir) {
                $items[] = function (AppItem $item) use ($dir, $this->app, $mode, $branch, $temp_path) {
                    $item->generate = "/inserts/$this->app/.gitkeep";
                    $item->generatePath = "/inserts/$this->app";
                    $item->templatePath = $temp_path;
                    $item->template = basename($dir);

                    $item->replace = [
                        '{app}' => $this->app
                    ];

                    return $item;
                };
            }
        }*/

        /*$items[] = function (AppItem $item) use ($mode) {
            $item->generate = "/layouts/$this->app/.gitkeep";
            $item->generatePath = "/layouts/$this->app";
            $item->sourceDir = "/layouts/Azk/ALL/";

            if ($mode === self::mode['clone']) {
                $item->dirOnly = true;
                $item->sourceDir = "/layouts/$this->oldName";
            }

            return $item;
        };

        $temp_path_layouts = $this->branch ? "/layouts/Azk/$this->branch" : "/layouts/Azk/corporate";
        $items[] = function (AppItem $item) use ($mode, $temp_path_layouts) {
            $item->generate = "/layouts/$this->app/.gitkeep";
            $item->generatePath = "/layouts/$this->app";
            $item->sourceDir = $temp_path_layouts;
            $item->dirOnly = true;

            return $item;
        };*/

        $upload_sub_dirs = glob($this->rootDir . '/upload/*', GLOB_ONLYDIR);
        if (count($upload_sub_dirs) > 0) {
            foreach ($upload_sub_dirs as $dir) {
                $temp_dir = substr($dir, 38);
                $items[] = function (ZAppItem $item) use ($mode, $dir, $temp_dir) {
                    $item->generate = "$temp_dir/$this->newName/.gitkeep";
                    $item->generatePath = "$temp_dir/$this->newName";

                    if ($mode === self::mode['clone']) {
                        $item->dirOnly = true;
                        if (file_exists("$dir/$this->oldName")) $item->sourceDir = "$temp_dir/$this->oldName";
                        else $item->sourceDir = '';
                    }

                    return $item;
                };
            }
        }

        $items[] = function (ZAppItem $item) use ($mode) {
            $item->generate = "/project/$this->newName/.gitkeep";
            $item->generatePath = "/project/$this->newName";

            return $item;
        };

        // service/App
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->generate = "/service/App/$this->newName/.gitkeep";
            $item->generatePath = "/service/App/$this->newName";
            /*$item->sourceDir = "/service/App/Azk/";
            $item->dirOnly = true;

            $item->replace = [
                "{app}" => $this->app
            ];*/

            if ($mode === self::mode['clone']) {
                $item->dirOnly = true;
                $item->sourceDir = "/service/App/$this->oldName/";
                $item->replace = [
                    $this->oldName => $this->newName
                ];
            }

            return $item;
        };

        $items[] = function (ZAppItem $item) use ($mode) {
            $class = ucfirst($this->newName);
            $item->generate = "/service/App/ALL/$class.php";
            $item->generatePath = "/service/App/ALL";
            $item->templatePath = "/service/App/ALL/";
            $item->template = "Azk.php";

            $item->affectFileOnly = true;

            $item->replace = [
                'Azk' => $class,
            ];


            if ($mode === self::mode['clone']) {
                $usedClass = strtolower($this->oldName);
                $tplAppClass = ucfirst($this->oldName);
                $item->template = "$this->oldName.php";
                $item->replace = [
                    $usedClass => $this->newName,
                    $tplAppClass => $class,
                ];
            }

            return $item;
        };

//        $temp_path = $this->branch ? "/webhtm/Azk/$this->branch" : "/webhtm/Azk/corporate";
        $items[] = function (ZAppItem $item) use ($mode) {
            $item->generate = "/webhtm/$this->newName/.gitkeep";
            $item->generatePath = "/webhtm/$this->newName";
//            $item->sourceDir = $temp_path;

            if ($mode === self::mode['clone']) {
                $item->dirOnly = true;
                $item->sourceDir = "/webhtm/$this->oldName";
            }

            return $item;
        };

        foreach ($items as $item) {
            $this->data[] = $item(new ZAppItem());
        }
    }

    #endregion

    #region Create

    /**
     * yangi ilova yaratish
     *
     */
    public function create()
    {
        $this->createApply();
        $this->createNginx();
    }

    /**
     * berilgan id bo'yicha file sistemasini yaratish
     * @param $id
     *
     */
    public function createById($id)
    {
        $model = DragApp::findOne($id);
        $this->newName = strtolower($model->name);
        $this->domain = strtolower($model->domain);
        $this->createApply();
        $this->createNginx();
    }

    /**
     * DB va tablitsalar yaratish
     *
     */
    public function createApply()
    {
        Az::debug($this->newName, 'application');

        Az::debug($this->newName, 'creating DB & tables');
        $this->createDb();
        $this->fillDb();
        $this->callPageRunCmd();

    }

    /**
     * hosts fayilga domainlarni qo'shish
     *
     */
    public function createNginx()
    {
        Az::debug($this->newName, 'application');
        if ($this->domain) Az::debug($this->domain, 'domain');

        $this->make();

        Az::debug($this->newName, 'adding domain name into hosts');
        $this->addDomainNameIntoHosts();

        Az::debug($this->newName, 'updating nginx');
        $this->updateNgnix(false);

    }

    /**
     * file sistemasini yaratish
     *
     */
    private function make()
    {
        global $boot;

        $boot->eol(1);
        $boot->echo('Adding Project: ' . $this->newName);

        $this->load(self::mode['create']);
        $this->appCopy();

        // updating /service/ALL/App.php and
        // launch norms
        Az::$app->smart->service->serviceAdd($this->newName);
    }



    public function nginxConf(){

        foreach ($this->confFolders as $domain => $path){
            $ip = '127.0.0.1';
            if ($domain === 'zoft')
                $ip = '10.10.3.207';
            if ($domain !== 'custom'){
                 $theme_conf = $this->theme . '.' . $domain . '.uz.conf';
                 if (!file_exists(Root . $path . $theme_conf))
                     continue;
                 $conf_content = file_get_contents(Root . $path . $theme_conf);

                 $conf_content = strtr($conf_content, [
                    $this->theme => $this->appName
                 ]);
                $conf = fopen(Root . $path . $this->appName . '.' . $domain . '.uz.conf', "w");
                fwrite($conf, $conf_content);
                fclose($conf);
                Az::debug($this->appName . '.' . $domain . '.uz.conf is created.');
                $this->domains[$this->appName . '.' . $domain . '.uz'] = $ip;
            } else  $this->customConf($path);

        }
    }

    public function customConf($path){

         if (empty($this->app->domain))
            return null;
        $conf_content = file_get_contents(Root . $path . 'custom');

        $conf_content = strtr($conf_content, [
            'app_name' => $this->appName,
            'domain_name' => $this->app->domain,
        ]);
        $conf = fopen(Root . $path . $this->app->domain . '.conf', "w");
        fwrite($conf, $conf_content);
        fclose($conf);

        Az::debug($this->app->domain .  '.uz.conf is created.');
        $this->domains[$this->app->domain] = '127.0.0.1';
    }

    public function updateHosts(){
        try {

            $hosts = file_get_contents(Root . '/hoster/profiles/Profiles/develop.txt');
            $title = "\n#\n#\t"  . $this->appName . "\n#\n";
            $content = null;
            foreach ($this->domains as $domain => $ip) {
                if (strpos($hosts, $domain) === false)
                    $content .= $ip . "\t\t" . $domain . EOL;
            }

            if (!empty($content))
                $hosts .= $title . $content;

            $conf = fopen(Root . '/hoster/profiles/Profiles/develop.txt', 'w');
            fwrite($conf, $hosts);
            fclose($conf);

            $conf = fopen('C:/Windows/System32/drivers/etc/hosts', "w");
            fwrite($conf, $hosts);
            fclose($conf);
        }
        catch (\Exception $exception){
            return $exception;
        }
    }

    public function restartNginx(){
        $cmd = ['d:\Develop\Projects\ALL\server\nginx\cd.cmd'];
        /*$process = new Process($cmd);
        $process->run(static function ($type, $buffer){
            if (Process::ERR === $type) {
                vdd('Error on changing directory: ' . $buffer);
            } else {
                $cmd = ['d:\Develop\Projects\ALL\server\nginx\nginx -t.cmd'];
                $process = new Process($cmd);
                $process->run(static function ($type, $buffer){
                    if (Process::ERR === $type) {
                        vdd('Error with Nginx: ' . $buffer);
                    } else {
                        $cmd = ['d:\Develop\Projects\ALL\server\nginx\nssm-reset.cmd'];
                        $process = new Process($cmd);
                        $process->run(static function ($type, $buffer){
                            if (Process::ERR === $type) {
                                vdd('Error with Nginx restarting: ' . $buffer);
                            } else {
                                Az::debug('Nginx restared successfuly!');
                            }
                        });
                    }
                });
            }
        });*/
        chdir('D://Develop/Projects/ALL/server/nginx/');
       /* $proc = new SymfonyProcess();
        $a = $proc->run($cmd,
        function ($output, $pid){*/
            $cmd = ['d:\Develop\Projects\ALL\server\nginx\nginx -t.cmd'];
            $a = $proc = new SymfonyProcess();
            $proc->run($cmd,
                function ($output, $pid){
                    $cmd = ['d:\Develop\Projects\ALL\server\nginx\nssm-reset.cmd'];
                    $proc = new SymfonyProcess();
                    $proc->run($cmd,
                        function ($output, $pid){
                             vd('Dilshod |' . $pid . ' - ' . $output);
                        },
                        function ($output, $pid){
                            vd('Error 1 |' . $pid);
                        },);
                },
                function ($output, $pid){
                    vd('Error 2 |' . $pid);
                },);
        /*},
        function ($output, $pid){
            vd('Error 1 |' . $pid);
        },);*/
        //vd($a);
        //vdd($proc);
    }


    /**
     * hosts fayilga domainlarni qo'shish
     *
     */
    public function addToHosts()
    {
        $folders = ['backup', 'extract', 'zetsoft', 'zoftapp'];
        $currentdir = getcwd();
        chdir('C:/Windows/System32/drivers/etc/');
        $file = 'hosts';
        $lines = file($file);
        chmod($file, 0777);

        $content = "\n127.0.0.1\t\t$this->newName.uz";
        foreach ($lines as $index => $line) {
            if (strpos($line, "$this->newName.uz")) {
                unset($lines[$index]);
            }
        }
        $lines[] = $content;
        file_put_contents($file, $lines);

        if ($this->domain) {
            $content = "\n127.0.0.1\t\t$this->domain";
            foreach ($lines as $index => $line) {
                if (strpos($line, "$this->domain")) {
                    unset($lines[$index]);
                }
            }
            $lines[] = $content;
            file_put_contents($file, $lines);
        }

        foreach ($folders as $folder) {
            $folder = $folder === "zoftapp" ? "zoft" : $folder;
            $content = "\n127.0.0.1\t\t$this->newName.$folder.uz";
            foreach ($lines as $index => $line) {
                if (strpos($line, "$this->newName.$folder.uz")) {
                    unset($lines[$index]);
                }
            }
            $lines[] = $content;
            file_put_contents($file, $lines);
        }

        chdir("$currentdir");
    }

    /**
     * hostprofiles fayiliga domainlarni qo'shish
     *
     */
    private function addToHostprofiles()
    {
        $folders = ['backup', 'extract', 'zetsoft', 'zoftapp'];
        $file = self::path['profilePath'] . '/develop.txt';
        $lines = file($file);

        if (!file_exists($file))
            return null;

        foreach ($this->domains as $domain)
        if ($this->domain) {
            $content = "\r\n127.0.0.1\t\t$this->domain";

            foreach ($lines as $index => $line) {
                if (strpos($line, "$this->domain")) {
                    unset($lines[$index]);
                }
            }
            $lines[] = $content;
            file_put_contents($file, $lines);
        }

        foreach ($folders as $folder) {
            $folder = $folder === "zoftapp" ? $folder = 'zoft' : $folder;
            $content = "\r\n127.0.0.1\t\t$this->newName.$folder.uz";

            foreach ($lines as $index => $line) {
                if (strpos($line, "$this->newName.$folder.uz")) {
                    unset($lines[$index]);
                }
            }
            $lines[] = $content;
            file_put_contents($file, $lines);
        }
    }

    /**
     * hosts va hostfiles fayillariga domainlarni qo'shish
     *
     */
    public function addDomainNameIntoHosts()
    {
        $this->addToHosts();
        $this->addToHostprofiles();
    }

    #endregion

    #region Remove

    /**
     * Berilgan app fayil sistemasini recycle papkasiga ko'chirish
     * @param $app
     */
    private function moveToRecycle($app)
    {


        global $boot;

        Az::debug($app, 'app to recycle:');
        $app_recycle_folder_name = date("Y_m_d_H_i");

        $recycle_path = self::path['recyclePath'] . $app_recycle_folder_name;
        $boot->mkdir($recycle_path);

        foreach ($this->data as $n => $data) {

            Az::debug($data, 'data');
            $path = $this->rootDir;

            $destination = $recycle_path . $data->generate;
            $pathToMove = $recycle_path . $data->generatePath;

            if ($data->affectFileOnly) {

                $boot->mkdir($pathToMove);
                $path .= $data->generate;

                if (file_exists($path)) {
                    copy($path, $destination);
                    ZFileHelper::unlink($path);
                }
            } else {
                $path .= $data->generatePath;

                if (file_exists($path)) {
                    ZFileHelper::copyDirectory($path, $pathToMove);
                    ZFileHelper::removeDir($path);
                }

            }
        }
    }


    /**
     * berilgan app fayil sistemasini recycle papkasiga ko'chirish
     * @param $app
     *
     */
    public function removeToRecycle($app)
    {
        global $boot;

        $this->load($app, self::mode['remove']);

        $boot->eol(1);
        $boot->echo('Removing Project: ' . $app);

        $this->moveToRecycle($app);

        Az::$app->smart->service->serviceRemove($app);
    }

    #endregion

    #region Clone

    /**
     *
     * mavjud proyectni clon qilish
     * @throws \yii\db\Exception
     */
    public function clone()
    {
        Az::debug($this->newName, 'cloning directories');
        $this->load(self::mode['clone']);

        $this->appCopy();

        // updating /service/ALL/App.php and
        // launch norms
        Az::$app->smart->service->serviceAdd($this->newName);

        Az::debug($this->newName, 'cloning DB & tables');
        $this->createDb();

        Az::debug($this->newName, 'excuting insert apply cmd');
        $this->insertCreateFunc();
        $this->insertCloneFolder();
        $this->insertApplyFunc();
        $this->fillDb();

        Az::debug($this->newName, 'excuting page run cmd');
        $this->callPageRunCmd();

        Az::debug($this->newName, 'adding domain name into hosts');
        $this->addDomainNameIntoHosts();

        Az::debug($this->newName, 'updating nginx');
        $this->updateNgnix(false);
    }

    /**
     *
     * proyectni file sistemasini nusxalash
     * clone metodda chaqiriladi
     */
    private function appCopy()
    {
        global $boot;

        $boot->eol(1);
        $boot->echo('Adding Project: ' . $this->newName);

        foreach ($this->data as $n => $data) {
            $path = $this->rootDir . $data->generatePath;
            $boot->mkdir($path);
            $file = $this->rootDir . $data->generate;
            $content = '';

            if (!empty($data->templatePath)) {
                $content = file_get_contents($this->rootDir . $data->templatePath . $data->template);

                if (!empty($data->replace)) {
                    $content = strtr($content, $data->replace);
                }
                file_put_contents($file, $content);
            }

//            $t = 1;

            if ($data->dirOnly && $data->sourceDir) {
                ZFileHelper::copyDirectory($this->rootDir . $data->sourceDir, $path);

                $source_path = ZFileHelper::findFiles($path);
                if (!empty($data->replace)) {
                    foreach ($source_path as $inner_path) {
                        $content = file_get_contents($inner_path);
                        $content = strtr($content, $data->replace);
                        file_put_contents($inner_path, $content);
                    }
                }

                /*if (!$data->affectFileToo)
                    continue;*/


            }

        }
    }

    /**
     * insert/apply --app comandasini ishga tushuradi
     * proyektni modellari asosida tablitsalar yaratish
     *
     *
     */
    private function insertApplyFunc()
    {
        $script = $this->rootDir . '/excmd/asrorz.php';
        $params = 'cruds/insert/apply --app=' . $this->newName;
        $phpcmd = 'php ' . $script . ' ' . $params;

        Az::debug($phpcmd, 'command to launch: ');
        $r = shell_exec($phpcmd);
        Az::debug($phpcmd, 'command executed: ');
        Az::debug($r, 'command result: ');
    }

    /**
     * insert/create --app commandasini ishga tushurish
     * yangi proyektga modellar yasash
     *
     */
    private function insertCreateFunc()
    {
        if (file_exists($this->rootDir . '/inserts/' . $this->oldName)) ZFileHelper::removeDir($this->rootDir . '/inserts/' . $this->oldName);

        $script = $this->rootDir . '/excmd/asrorz.php';
        $params = 'cruds/insert/create --app=' . $this->oldName;
        $phpcmd = 'php ' . $script . ' ' . $params;

        Az::debug($phpcmd, 'command to launch: ');
        $r = shell_exec($phpcmd);
        Az::debug($phpcmd, 'command executed: ');
        Az::debug($r, 'command result: ');
    }

    /**
     *  mavjud proyektni modellarini tablitaslarini nusxa olish
     *
     */
    private function insertCloneFolder()
    {
        global $boot;
        $coreIP = $boot->env('mainDbIP');

        if (file_exists($this->rootDir . "/inserts/$this->oldName")) ZFileHelper::copyDirectory($this->rootDir . "/inserts/$this->oldName", $this->rootDir . "/inserts/$this->newName");

        $sub_dirs = glob($this->rootDir . "/inserts/$this->newName/*");

        foreach ($sub_dirs as $dir) {
            if ($dir !== null && is_file($dir)) {
                $content = file_get_contents($dir);
                $replace = [
                    $this->oldName => $this->newName
                ];
                $content = strtr($content, $replace);
                file_put_contents($dir, $content);
            }
        }

        $newdb = $this->dbname;
        $data = require $this->rootDir . '/configs/data/' . $this->oldName . '.php';
        $source = $data['components']['db']['dbName'];

        $file = $this->rootDir . '/configs/data/' . $this->newName . '.php';
        $file_content = file_get_contents($file);
        $replace = [
            $source => $newdb
        ];

        $content = strtr($file_content, $replace);
        file_put_contents($file, $content);

    }

    #endregion

    #region Extract

    public function extract()
    {
        global $boot;

        $app_destination = self::path['extractPath'] . '/' . $this->newName;
        /*if (!file_exists($app_destination))
            $boot->mkdir($app_destination);*/

        /**
         *
         * actions
         */
        $actions_dir = $this->rootDir . "/actions";

        symlink($actions_dir, $app_destination . "/actions");

        /**
         *
         * assetz
         */
        $assetz_dir = $this->rootDir . "/assetz";
        symlink($assetz_dir, $app_destination . "/assetz");

        /**
         *
         * binary
         */
        $binary_dir = $this->rootDir . "/binary";
        symlink($binary_dir, $app_destination . "/binary");

        /**
         *
         * blocks
         */
        $blocks_dir = $this->rootDir . "/blocks";
        if (!file_exists($app_destination . "/blocks/counts"))
            if (!mkdir($concurrentDirectory = $app_destination . "/blocks/counts", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($blocks_dir . "/counts/$this->newName", "$app_destination/blocks/counts/$this->newName");
        if (!file_exists($app_destination . "/blocks/footer"))
            if (!mkdir($concurrentDirectory = $app_destination . "/blocks/footer", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($blocks_dir . "/footer/$this->newName", "$app_destination/blocks/footer/$this->newName");
        if (!file_exists($app_destination . "/blocks/navbar"))
            if (!mkdir($concurrentDirectory = $app_destination . "/blocks/navbar", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($blocks_dir . "/navbar/$this->newName", "$app_destination/blocks/navbar/$this->newName");

        /**
         *
         * configs
         */
        $configs_dir = $this->rootDir . "/configs";
        if (!file_exists($app_destination . "/configs"))
            if (!mkdir($concurrentDirectory = $app_destination . "/configs", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($configs_dir . "/ALL", "$app_destination/configs/ALL");

        if (!file_exists($app_destination . "/configs/cmd"))
            if (!mkdir($concurrentDirectory = $app_destination . "/configs/cmd", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($configs_dir . "/cmd/ALL.php", "$app_destination/configs/cmd/ALL");
        symlink($configs_dir . "/cmd/$this->newName.php", "$app_destination/configs/cmd/$this->newName");

        if (!file_exists($app_destination . "/configs/data"))
            if (!mkdir($concurrentDirectory = $app_destination . "/configs/data", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($configs_dir . "/data/ALL.php", "$app_destination/configs/data/ALL");
        symlink($configs_dir . "/data/$this->newName.php", "$app_destination/configs/data/$this->newName");

        if (!file_exists($app_destination . "/configs/env"))
            if (!mkdir($concurrentDirectory = $app_destination . "/configs/env", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($configs_dir . "/env/ALL.env", "$app_destination/configs/env/ALL");
        symlink($configs_dir . "/env/$this->newName.env", "$app_destination/configs/env/$this->newName");
        symlink($configs_dir . "/user", "$app_destination/configs/user");

        if (!file_exists($app_destination . "/configs/web"))
            if (!mkdir($concurrentDirectory = $app_destination . "/configs/web", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($configs_dir . "/web/ALL.php", "$app_destination/configs/web/ALL");
        symlink($configs_dir . "/web/$this->newName.php", "$app_destination/configs/web/$this->newName");
        symlink($configs_dir . "/zmd", "$app_destination/configs/zmd");
        link($configs_dir . "/ALL.php", "$app_destination/configs/ALL.php");

        /**
         *
         * cncmd
         */
        if (!file_exists($app_destination . "/cncmd"))
            if (!mkdir($concurrentDirectory = $app_destination . "/cncmd", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink("/cncmd/ALL", "$app_destination/cncmd/ALL");
        symlink("/cncmd/$this->newName", "$app_destination/cncmd/$this->newName");

        /**
         *
         * cnweb
         */
        if (!file_exists($app_destination . "/cnweb"))
            if (!mkdir($concurrentDirectory = $app_destination . "/cnweb", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink("/cnweb/ALL", "$app_destination/cnweb/ALL");
        symlink("/cnweb/$this->newName", "$app_destination/cnweb/$this->newName");

        /**
         *
         * dbcore
         */
        $dbcore_dir = $this->rootDir . "/dbcore";
        if (!file_exists($app_destination . "/dbcore"))
            if (!mkdir($concurrentDirectory = $app_destination . "/dbcore", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($dbcore_dir . "/ALL", "$app_destination/dbcore/ALL");
        symlink($dbcore_dir . "/$this->newName", "$app_destination/dbcore/$this->newName");


        /**
         *
         * dbdata
         */
        $dbdata_dir = $this->rootDir . "/dbdata";
        if (!file_exists($app_destination . "/dbdata"))
            if (!mkdir($concurrentDirectory = $app_destination . "/dbdata", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($dbdata_dir . "/ALL", "$app_destination/dbdata/ALL");
        symlink($dbdata_dir . "/$this->newName", "$app_destination/dbdata/$this->newName");

        /**
         *
         * dbitem
         */
        $dbitem_dir = $this->rootDir . "/dbitem";
        symlink($dbitem_dir, "$app_destination/dbitem");

        /**
         *
         * excmd
         */
        if (!file_exists($app_destination . "/excmd"))
            if (!mkdir($concurrentDirectory = $app_destination . "/excmd", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink("/excmd/$this->newName", "$app_destination/excmd/$this->newName");

        /**
         *
         * exweb
         */
        if (!file_exists($app_destination . "/exweb"))
            if (!mkdir($concurrentDirectory = $app_destination . "/exweb", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink("/exweb/$this->newName", "$app_destination/exweb/$this->newName");

        /**
         *
         * former
         */
        $former_dir = $this->rootDir . "/former";
        if (!file_exists($app_destination . "/former"))
            if (!mkdir($concurrentDirectory = $app_destination . "/former", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($former_dir . "/ALL", "$app_destination/former/ALL");
        symlink($former_dir . "/$this->newName", "$app_destination/former/$this->newName");

        /**
         *
         * inserts
         */
        $inserts_dir = $this->rootDir . "/inserts";
        if (!file_exists($app_destination . "/inserts"))
            if (!mkdir($concurrentDirectory = $app_destination . "/inserts", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($inserts_dir . "/$this->newName", "$app_destination/inserts/$this->newName");

        /**
         *
         * layouts
         */
        $layouts_dir = $this->rootDir . "/layouts";
        if (!file_exists($app_destination . "/layouts"))
            if (!mkdir($concurrentDirectory = $app_destination . "/layouts", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($layouts_dir . "/$this->newName", "$app_destination/layouts/$this->newName");

        /**
         *
         * models
         */
        $models_dir = $this->rootDir . "/models";
        if (!file_exists($app_destination . "/models"))
            if (!mkdir($concurrentDirectory = $app_destination . "/models", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($models_dir . "/ALL", "$app_destination/models/ALL");
        symlink($models_dir . "/$this->newName", "$app_destination/models/$this->newName");

        /**
         *
         * module
         */
        $module_dir = $this->rootDir . "/module";
        symlink($module_dir, "$app_destination/module");

        /**
         *
         * project
         */
        $project_dir = $this->rootDir . "/project";
        if (!file_exists($app_destination . "/project"))
            if (!mkdir($concurrentDirectory = $app_destination . "/project", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($project_dir . "/$this->newName", "$app_destination/project/$this->newName");

        /**
         *
         * render
         */
        $render_dir = $this->rootDir . "/render";
        symlink($render_dir, "$app_destination/render");

        /**
         *
         * sample
         */
        $sample_dir = $this->rootDir . "/sample";
        symlink($sample_dir, "$app_destination/sample");

        /**
         *
         * scripts
         */
        $scripts_dir = $this->rootDir . "/scripts";
        symlink($scripts_dir, "$app_destination/scripts");

        /**
         *
         * service
         */
        if (!file_exists($app_destination . "/service"))
            if (!mkdir($concurrentDirectory = $app_destination . "/service", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        $service_sub_dirs = glob("../../service/*", GLOB_ONLYDIR);
        foreach ($service_sub_dirs as $dir) {
            $temp_dir = substr($dir, 5);
            if ($temp_dir !== '/service/.trash' && $temp_dir !== '/service/App')
                symlink($this->rootDir . $temp_dir, $app_destination . $temp_dir);
        }

        $service_dir = $this->rootDir . "/service";
        if (!file_exists($app_destination . "/service/App"))
            if (!mkdir($concurrentDirectory = $app_destination . "/service/App", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($service_dir . "/App/ALL", "$app_destination/service/App/ALL");
        symlink($service_dir . "/App/$this->newName", "$app_destination/service/App/$this->newName");

        /**
         *
         * storing
         */
        $storing_dir = $this->rootDir . "/storing";
        symlink($storing_dir, "$app_destination/storing");

        /**
         *
         * system
         */
        $system_dir = $this->rootDir . "/system";
        symlink($system_dir, "$app_destination/system");

        /**
         *
         * upload
         */
        if (!file_exists($app_destination . "/upload"))
            if (!mkdir($concurrentDirectory = $app_destination . "/upload", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        $upload_sub_dirs = glob($this->rootDir . '/upload/*', GLOB_ONLYDIR);
        foreach ($upload_sub_dirs as $dir) {
            $temp_dir = substr($dir, 38);
            var_dump($temp_dir . '/' . $this->newName);
            if (!file_exists($app_destination . $temp_dir))
                if (!mkdir($concurrentDirectory = $app_destination . $temp_dir, 0777, true) && !is_dir($concurrentDirectory)) {
                    throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
                }
        }

        /**
         *
         * vendor
         */
        $vendor_dir = $this->rootDir . "/vendor";
        symlink($vendor_dir, "$app_destination/vendor");

        /**
         *
         * webhtm
         */
        $webhtm_dir = $this->rootDir . "/webhtm";
        if (!file_exists($app_destination . "/webhtm"))
            if (!mkdir($concurrentDirectory = $app_destination . "/webhtm", 0777, true) && !is_dir($concurrentDirectory)) {
                throw new \RuntimeException(sprintf('Directory "%s" was not created', $concurrentDirectory));
            }
        symlink($webhtm_dir . "/ALL", "$app_destination/webhtm/ALL");
        symlink($webhtm_dir . "/$this->newName", "$app_destination/webhtm/$this->newName");

        /**
         *
         * widgets
         */
        $widgets_dir = $this->rootDir . "/widgets";
        symlink($widgets_dir, "$app_destination/widgets");

    }

    #endregion

    #region Test
    public function test(): void
    {
        $this->newName = 'testapp1';
        $this->oldName = 'eyuf';
        $app = 'testapp1';
//        $this->testClone();
//        $this->testCreate();
//        $this->testRemoveToRecycle($app);
    }

    public function testCreate(): void
    {
        Az::debug($this->newName, 'new test application name');
        $this->create();
    }

    public function testRemoveToRecycle($app): void
    {
        $this->removeToRecycle($app);
    }

    public function testClone(): void
    {
        Az::debug($this->oldName, 'application to test clone');
        Az::debug($this->newName, 'new test application name');
        $this->clone();
    }

    #endregion

    public function checkNginx()
    {
      /*  $process = new Process(['d:/Develop/Projects/ALL/server/nginx/nginx -t']);
        $process->run(function ($type, $buffer) {
            if (Process::ERR === $type) {
                echo 'ERR > '.$buffer;
            } else {
//
                chdir('d:\Develop\Projects\ALL\server\nginx\\');
                /*Az::$app->utility->execs->exec("net stop Zetsoft_Nginx");
                Az::$app->utility->execs->exec("net start Zetsoft_Nginx");*

            }
        });*/
        /*shell_exec("net stop Zetsoft_Nginx");
        shell_exec("net start Zetsoft_Nginx");*/
        /*Az::$app->utility->execs->exec("net stop Zetsoft_Nginx");
        Az::$app->utility->execs->exec("net start Zetsoft_Nginx");*/
        chdir('d:\Develop\Projects\ALL\server\nginx\\');
        Az::$app->utility->execs->chdir('d:\\Develop\\Projects\\ALL\\server\\nginx\\');
        system('nginx -t', $Resturn);
        if ($Resturn === 0) {
            shell_exec("net stop Zetsoft_Nginx");
            shell_exec("net start Zetsoft_Nginx");
        }
        else
            vdd('error');
        /*Az::$app->utility->execs->exec("net stop Zetsoft_Nginx");
        $start_time = time();

        while (true) {
            if ((time() - $start_time) > 5) {
                Az::$app->utility->execs->exec("net start Zetsoft_Nginx");
                return false; // timeout, function took longer than 5 seconds
            }
        }*/
    }

}

