<?php

/**
 *
 *
 * Author:  Asror Zakirov
 * https://www.linkedin.com/in/asror-zakirov
 * https://www.facebook.com/asror.zakirov
 * https://github.com/asror-z
 *
 */

namespace zetsoft\service\smart;


use yii\base\Component;
use yii\helpers\ArrayHelper;
use zetsoft\dbitem\core\NormServiceItem;
use zetsoft\dbitem\data\ALLApp;
use zetsoft\dbitem\data\Settings;
use zetsoft\system\Az;
use zetsoft\system\helpers\ZArrayHelper;
use zetsoft\system\helpers\ZFileHelper;
use zetsoft\system\kernels\ZFrame;

class Service extends ZFrame
{
    #region Vars
    public $dev = false;
    public const devdata = [
        'dir' => 'zetsoft/storing/testing/service/',
        'use' => 'zetsoft\storing\testing\service\\',
    ];
    public const proddata = [
        'dir' => 'zetsoft/service/',
        'use' => 'zetsoft\service\\',
    ];
    private $utd;
    private $fl;


    /* @var ALLApp $allApp */
    public $allApp;

    /* @var Settings $proper */
    public $setter;

    private $path;
    private $pathAll;

    /**
     *
     * Services
     */

    private $properties;
    private $uses;

    private $pathServiceAll;
    private $pathService;

    public $hasOne = [];
    public $hasMulti = [];
    public $hasMany = [];

    /**
     *
     * Constants
     */

    public const Path = [


        /*'aliasServisePath' => '@zetsoft/service/App/ALL',
        'aliasServiseAllPath' => '@zetsoft/service/ALL',*/

        'aliasServisePath' => '@zetsoft/service/App',
        'aliasServiseAllPath' => '@zetsoft/service'
    ];

#endregion

#region ALL

    public function init()
    {

        parent::init(); // TODO: Change the autogenerated stub
        /**
         *
         * Path Fixes
         */
        /*$this->path = \Yii::getAlias(self::Path['aliasFormPath']);
        $this->pathAll = \Yii::getAlias(self::Path['aliasFormAllPath']);*/

        $this->pathService = \Yii::getAlias(self::Path['aliasServisePath']);
        $this->pathServiceAll = \Yii::getAlias(self::Path['aliasServiseAllPath']);

        if ($this->dev) {
            $this->utd = self::devdata['use'];
            $this->fl = self::devdata['dir'];
        } else {
            $this->utd = self::proddata['use'];
            $this->fl = self::proddata['dir'];
        }


    }

    public function layout()
    {
        $this->layout = [
            'service' => file_get_contents(Az::getAlias('@zetsoft/binary/giiapp/service.php')),

            'privates' => '
    private $_{private};',

            'methods' => '
    public function get{getName}()
    {
        if ($this->_{private} === null)
            $this->_{private} = new {serviceName}();

        return $this->_{private};
    }
    ',
        ];

    }

    #endregion


#region Service

    public function run()
    {
        $AppItems = $this->pathScan(false);
        $allItems = $this->pathScan();
        if (!empty($AppItems) || !empty($allItems)) {
            foreach ($AppItems as $item) {
                $return = $this->getUpdatedServiceData($item);
                $serviceFile = ZFileHelper::normalizePath($item->file);
                Az::debug($serviceFile);
                file_put_contents($serviceFile, $return);
            }
            $this->generateApp();

            foreach ($allItems as $item) {
                $return = $this->getUpdatedServiceData($item);
                $serviceFile = ZFileHelper::normalizePath($item->file);
                Az::debug($serviceFile);
                file_put_contents($serviceFile, $return);
            }

            $this->generateAll();
        } else {
            Az::error($this->paramGet('smartClass'), 'Paths does not exist');
        }
    }


    public function generateAll()
    {
        $file = ZFileHelper::normalizePath($this->pathServiceAll) . "\\ALL\\ALL.php";
        if (!empty(Az::$app->params['smartClass'])) {
            $all = file(Root . '/service/ALL/ALL.php');
            $check = true;
            $lastKeyVar = null;
            $lastKeyClass = null;
            foreach (Az::$app->params['smartClass'] as $smartClass) {
                foreach ($all as $key => $string) {
                    if (strpos($string, ' ' . $smartClass . ' ') !== false) {
                        $check = false;
                    }
                    if (strpos($string, '/* @var ') !== false) {
                        $lastKeyVar = $key;
                    }
                    if (strpos($string, '::class,') !== false) {
                        $lastKeyClass = $key;
                    }
                }
                if ($check) {
                    $all[$lastKeyVar + 1] .= PHP_EOL . '    /* @var ' . ucfirst($smartClass) . ' $' . lcfirst($smartClass) . ' */
    public $' . lcfirst($smartClass) . ';';

                    $all[$lastKeyClass] .= PHP_EOL . "                '" . lcfirst($smartClass) . "' => " . ucfirst($smartClass) . "::class," . PHP_EOL;
                }
                $check = true;
            }
            Az::debug($file);
            file_put_contents($file, $all);
        } else {
            $itemsAll = $this->pathScan();
            $classes = [];
            $key = null;
            $ns = null;
            foreach ($itemsAll as $itemKey => $itemVal) {
                $classes[$itemKey] = $itemVal->class . "::class";
                $key = $itemKey;
                $ns = $itemVal->ns;
            }

            $classes[basename($this->pathService)] = str_replace(basename($classes[$key]), ucfirst(basename($this->pathService)), $classes[$key]) . "::class";

            $arrayLayout = "
                '{key}' => {val},
            ";
            $propertyLayout = "/* @var {Classname} {var} */
            public {var};
            
            ";
            $resultArray = '';
            $resultProperty = '';
            foreach ($classes as $key => $val) {

                $resultProperty .= strtr($propertyLayout, [
                    '{Classname}' => ucfirst($key),
                    '{var}' => '$' . $key,
                ]);

                $resultArray .= strtr($arrayLayout, [
                    '{key}' => $key,
                    '{val}' => $val,
                ]);
            }
            $resultArray = "[" . $resultArray . '];';

            $ALL = "<?php
        
namespace {$ns};
        
trait ALL {

    {$resultProperty}
       
       
       
            
    public static function ioc() {
        return {$resultArray}
    }
            
}";
            Az::debug($file);
            file_put_contents($file, $ALL);
        }
    }

    public function generateApp()
    {

        $files = ZFileHelper::scanFilesPHP(Root . '/service/App/All');

        $propsALL = null;
        $privates = null;
        $methods = null;
        $usesAll = null;
        foreach ($files as $item) {
            $className = basename($item);
            $className = str_replace('.php', '', $className);
            $lcName = lcfirst($className);
            $ucName = ucfirst($className);
            $private = $lcName;
            $propsALL .= '* @property ' . $ucName . ' $' . $lcName . "\n";

            $privates .= strtr($this->layout['privates'], [
                '{private}' => $private
            ]);
            $usesAll .= "use zetsoft\\service\\App\\All\\$ucName" . ";\r\n";
            $methods .= strtr($this->layout['methods'], [
                    '{serviceName}' => $ucName,
                    '{private}' => $lcName,
                    '{getName}' => $ucName,
                ]) . "\n";
        }

        /**
         *
         * Uses
         */
        $usesAll .= 'use ' . Component::class . ";";
        /**
         *
         * Return
         */

        $return = strtr($this->layout['service'], [
            'ZNamespace' => "zetsoft\service\ALL",
            '// Property' => $propsALL,
            '// Uses' => $usesAll,
            'ZServiceName' => 'App',
            '// Privates' => $privates,
            '// Methods' => $methods,
        ]);

        file_put_contents($this->pathServiceAll . '/All/App.php', $return);

    }

    public function pathScan($rootService = true)
    {
        if ($rootService) {
            $pathAll = ZFileHelper::scanFolder($this->pathServiceAll, false);
            $path = $this->pathServiceAll;
        } else {
            $pathAll = ZFileHelper::scanFolder($this->pathService, false);
            $path = $this->pathService;
        }

        $filesAll = [];
        $pathService = $this->pathService;
        $serviceName = basename($pathService);

        foreach ($pathAll as $pathKey => $pathVal) {
            $pathTemp = basename($pathVal);
            $filesTemp = ZFileHelper::scanFiles($pathVal, false);

            if ($pathTemp !== $serviceName && $pathTemp !== 'ALL' && !empty($filesTemp)) {
                foreach ($filesTemp as $key => $file) {
                    if (strpos($file, '.php') === false) {
                        unset($filesTemp[$key]);
                    } else {
                        $checkClass = file_get_contents($file);
                        if (strpos($checkClass, 'class ') === false)
                            unset($filesTemp[$key]);
                    }
                }
                $filesAll[basename($pathVal)] = $filesTemp;
            }
        }
        if (empty(Az::$app->params['smartClass'])) {
            $deleteItems = ZFileHelper::scanFiles($path . '/ALL');
            foreach ($deleteItems as $key => $item) {
                if (ZArrayHelper::keyExists(str_replace('.php', '', lcfirst(basename($item))), $filesAll)) {
                    continue;
                }
//                if (file_exists($item)) {
//                    if (str_replace('.php', '', strtolower(basename($item))) === 'App')
//                        continue;
//                    unlink($item);
//                }
            }
        }
        return $this->generateItems($filesAll, $path);
    }

    public function generateItems($filesAll, $path)
    {
        $class = [];
        $item = [];

        foreach ($filesAll as $pathName => $files) {
            $smartCheck = ucfirst($pathName);

            if (!empty(Az::$app->params['smartClass']))
                if (!ZArrayHelper::isIn($smartCheck, $this->paramGet('smartClass')))
                    continue;

            foreach ($files as $fileKey => $fileVal) {
                $fileVal = ZFileHelper::normalizePath($fileVal);

                $classWithoutAlias = str_replace('.php', '', $fileVal);

                $class[$pathName][] = strtr($classWithoutAlias, [
                    Az::getAlias('@zetsoft') => 'zetsoft',
                    '\\' => '/'
                ]);

                $item[$pathName] = new NormServiceItem();

                foreach ($class[$pathName] as $key1 => $value1) {


                    $item[$pathName]->uses[] = str_replace('/', "\\", $value1);
                    $item[$pathName]->file = ZFileHelper::normalizePath($path) . "\\All\\" . ucfirst($pathName) . '.php';
                    $item[$pathName]->property[] = basename($value1);
                    $item[$pathName]->propertyVar[] = lcfirst(basename($value1));
                    $item[$pathName]->class = ucfirst($pathName);
                    $item[$pathName]->ns = str_replace('/', "\\", substr($value1, 0, mb_strrpos($value1, $pathName))) . 'ALL';
                }
            }
        }

        return $item;
    }

    public function getUpdatedServiceData($item)
    {
        $propsALL = null;
        $privates = null;
        $methods = null;

        $item->property = array_unique($item->property);
        $item->propertyVar = array_unique($item->propertyVar);

        foreach ($item->property as $key => $prop) {
            $prop = lcfirst($prop);
            $propsALL .= '* @property ' . $item->property[$key] . ' $' . $prop . "\n";

            $privates .= strtr($this->layout['privates'], [
                '{private}' => $prop
            ]);

            $methods .= strtr($this->layout['methods'], [
                    '{serviceName}' => $item->property[$key],
                    '{private}' => $prop,
                    '{getName}' => ucfirst($prop),
                ]) . "\n";
        }


        /**
         *
         * Uses
         */
        $usesAll = null;


        $item->uses[] = Component::class;

        $item->uses = array_unique($item->uses);

        foreach ($item->uses as $use)
            $usesAll .= 'use ' . $use . ";\r\n";

        /**
         *
         * Return
         */
        $return = strtr($this->layout['service'], [
            'ZNamespace' => $item->ns,
            '// Property' => $propsALL,
            '// Uses' => $usesAll,
            'ZServiceName' => basename($item->class),
            '// Privates' => $privates,
            '// Methods' => $methods,
        ]);


        return $return;
    }

    public function serviceScan()
    {
        $return = [];

        $services = [];
        $servicesAll = [];
        $servicesApp = [];

        if (file_exists($this->pathServiceAll))
            $servicesAll = ZFileHelper::findFiles($this->pathServiceAll, [
                'recursive' => false
            ]);
        if (file_exists($this->pathService))
            $servicesApp = ZFileHelper::findFiles($this->pathService, [
                'recursive' => false
            ]);

        $services = ArrayHelper::merge($servicesAll, $servicesApp);

        foreach ($services as $service) {

            $service = ZFileHelper::normalizePath($service);

            $service = str_replace('.php', '', $service);

            $className = basename($service);


            if ($className === "Cores")
                continue;

            if (!empty(Az::$app->params['smartClass']))
                if (!ZArrayHelper::isIn($className, Az::$app->params['smartClass']))
                    continue;

            $class = strtr($service, [
                Az::getAlias('@zetsoft') => 'zetsoft',
                '\\' => '/'
            ]);

            $return[] = $class;

        }

        return $return;
    }

    public function getServiceData($class)
    {
        $item = new NormServiceItem();

        $item->file = Az::getAlias('@' . $class . '.php');

        $content = file_get_contents($item->file);

        $item->uses = Az::$app->utility->pregs->regUses($content);
        $item->property = Az::$app->utility->pregs->regProperty($content);


        $item->propertyVar = Az::$app->utility->pregs->regProperty($content, 2);
        $item->ns = str_replace(['/' . basename($class), '/'], ['', '\\'], $class);

        $item->class = $class;

        return $item;
    }

    public function serviceAdd($app)
    {

        $className = $app; // Az::$app->params['smartClass'];

        $item = $this->getServiceData($this->fl . 'ALL/App');

        $utd = $this->utd . 'App\ALL\\' . ucfirst($className);
        $item->uses[] = $utd;

        //$item->property[] = '* @property '.ucfirst($className).' '.strtolower($className);
        $item->property[] = ucfirst($className);
        $item->propertyVar[] = strtolower($className);

        $return = $this->getUpdatedServiceData($item);
        $serviceFile = ZFileHelper::normalizePath($item->file);

        Az::debug($serviceFile, 'Process');

        file_put_contents($serviceFile, $return);
    }

    public function serviceRemove($app)
    {
        $this->dev = true;
        $className = $app; // Az::$app->params['smartClass'];
        $usage = ucfirst($className);

        $item = $this->getServiceData($this->fl . 'ALL/App');

        $utd = $this->utd . 'App\ALL\\' . $usage;
        $k = array_search($utd, $item->uses);
        if ($k)
            unset($item->uses[$k]);

        $k = array_search($usage, $item->property);
        if ($k)
            unset($item->property[$k]);

        $k = array_search(strtolower($className), $item->propertyVar);
        if ($k)
            unset($item->propertyVar[$k]);

        $return = $this->getUpdatedServiceData($item);
        $serviceFile = ZFileHelper::normalizePath($item->file);

        Az::debug($serviceFile, 'Process');

        file_put_contents($serviceFile, $return);
    }

#endregion


}

