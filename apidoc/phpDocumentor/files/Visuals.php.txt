<?php

/**
 *
 *
 * Author:  Asror Zakirov
 * https://www.linkedin.com/in/asror-zakirov
 * https://www.facebook.com/asror.zakirov
 * https://github.com/asror-z
 *
 */

namespace zetsoft\service\smart;


use phpDocumentor\Reflection\Types\Self_;
use Ratchet\App;
use zetsoft\dbitem\data\ALLApp;
use zetsoft\dbitem\data\Config;
use zetsoft\dbitem\data\ConfigDB;
use zetsoft\dbitem\data\Form;
use zetsoft\dbitem\data\FormDb;
use zetsoft\dbitem\data\Settings;
use zetsoft\models\drag\DragConfig;
use zetsoft\models\drag\DragConfigDb;
use zetsoft\models\drag\DragForm;
use zetsoft\models\drag\DragFormDb;
use zetsoft\system\actives\ZActiveRecord;
use zetsoft\system\actives\ZModel;
use zetsoft\system\Az;
use zetsoft\system\helpers\ZArrayHelper;
use zetsoft\system\kernels\ZFrame;
use zetsoft\system\kernels\ZView;

class Visuals extends ZFrame
{

    #region Vars

    /* @var ALLApp $allApp */
    public $allApp;


    /*private $className;*/
    private $path;
    private $pathAll;


    public $hasOne = [];
    public $hasMany = [];
    public $hasMulti = [];

    /**
     *
     * Constants
     */

    public const excludes = [
        'id',
        'drag_config_db_id',
        'name',
        'created_at',
        'created_by',
        'modified_at',
        'modified_by',
    ];

    public const excludeCols = [
        'id',
        'created_at',
        'created_by',
        'modified_at',
        'modified_by',
    ];

    public const Path = [

        'namespaceCore' => "zetsoft\dbcore\\" . App . '\\',
        'namespaceCoreAll' => "zetsoft\dbcore\\ALL\\",

        'pathCore' => '@zetsoft/dbcore/' . App,
        'pathCoreAll' => '@zetsoft/dbcore/ALL',

        'aliasFormPath' => '@zetsoft/former/' . App,
        'aliasFormAllPath' => '@zetsoft/former/ALL',

    ];

    #endregion

    #region ALL

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        /**
         *
         * Path Fixes
         */
        $this->path = \Yii::getAlias(self::Path['aliasFormPath']);
        $this->pathAll = \Yii::getAlias(self::Path['aliasFormAllPath']);
    }

    public function space($class)
    {
        $className = basename($class);
        return str_replace("\\{$className}", '', $class);
    }

    public function null()
    {
        $this->hasOne = null;
        $this->hasMany = null;
        $this->hasMulti = null;
    }

    #endregion


    #region Model

    public function model()
    {

        $tables = DragConfigDb::find()->all();

        /** @var DragConfigDb $table */
        foreach ($tables as $table) {

            $app = new ALLApp();

            /** @var DragFormDb[] $coreFormDbs */
            $coreFormDbs = DragFormDb::find()
                ->where([
                    'drag_config_db_id' => $table->id
                ])
                ->indexBy('name')
                ->all();

            if ($coreFormDbs === null) {
                return false;
            }

            foreach ($coreFormDbs as $name => $coreFormDb) {
                $form = new FormDb();
                $formDb = $this->columnFix($form, $coreFormDb);
                $app->columns[$name] = $formDb;
            }

            $setter = new Settings();
            $setter->className = $table->class_name;
            $setter->type = Settings::type['model'];
            $baseClass = $this->baseClass($setter->className);

            $setter->classBase = $baseClass;
            $setter->namespace = 'zetsoft\\models\\' . App;

            $app->configs = new ConfigDB();
            $app->configs = $this->configsFix($app->configs, $table->attributes);

            $app->configs->title = $table->class_name;
            $app->configs->extraConfig = false;
            $app->configs->name = $table->title;
            if (!empty($table->card)) {
                $app->cards = $this->getCard($table->card);
            }
            /**
             *
             * AllApp Filling
             */

            $setter->allApp = $app;

            Az::$app->smart->puters->run($setter);
        }
    }


    private function getCard($cards)
    {
        $return = [];
        foreach ($cards as $step) {

            $stepItems = ZArrayHelper::getValue($step, 'items');
            $newStep = [];
            $newStep['title'] = ZArrayHelper::getValue($step, 'title');
            $newStep['enable'] = ZArrayHelper::getValue($step, 'enable')  ? true : false;

            foreach ($stepItems as $block) {

                $blockItems = ZArrayHelper::getValue($block, 'items');
                $newBlock = null;

                if (!empty($blockItems)) {
                    $newBlock['title'] = ZArrayHelper::getValue($block, 'title');
                    $newBlock['enable'] = ZArrayHelper::getValue($block, 'enable') ? true : false;
                    foreach ($blockItems as $blockItem) {
                        $newItem = null;
                        foreach ($blockItem as $item) {
                            foreach ($item as $name)
                                $newItem[] = $name;
                        }

                        $newBlock['items'][] = $newItem;
                    }

                    $newStep['items'][] = $newBlock;
                }
            }

            $return[] = $newStep;

        }

        return $return;
    }



    #endregion

    #region Forms

    /**
     *
     * Function  blocksFix
     * @param ALLApp $allApp
     * @return  array
     * @throws \Exception
     */

    public function form()
    {

        Az::start(__FUNCTION__);

        $tables = DragConfig::find()->all();

        foreach ($tables as $table) {

            $allApp = new ALLApp();

            $allApp->configs = new Config();
            $allApp->configs->title = $table->title;
            $allApp->configs->name = $table->class;

            $columns = DragForm::find()
                ->where([
                    'table' => $table->id
                ])
                ->indexBy('name')
                ->all();


            foreach ($columns as $name => $coreForm) {
                $class = new Form();
                $form = $this->columnFix($class, $coreForm);
                $allApp->columns[$name] = $form;
            }

            $setter = new Settings();
            $setter->class = $table->class;
            $setter->className = $table->class;
            $setter->type = Settings::type['form'];
            $baseClass = $this->baseClass($setter->className);
            $setter->classBase = $baseClass;
            $setter->namespace = 'zetsoft\\former\\' . App;
            $setter->allApp = $allApp;

            Az::$app->smart->puters->run($setter);

        }
    }

    #endregion

    #region Fix Methods


    private function columnFix($form, $column)
    {

        foreach ($column->attributes as $key => $value)
            if (!ZArrayHelper::isIn($key, self::excludes) && !empty($value))
                if ($form->$key !== $value)
                    $form->$key = $value;

        if (empty($column->title))
            $form->title = 'Колонка ' . $column->id;

        /** @var ZView $this */
        $form->data = Az::$app->smart->widget->dataFix($column->data);

        if (!empty($column->rules))
            $form->rules = $this->rulesFix($column->rules);

        $configs = $this->widgetConfig($form);
        if (!empty($configs))
            $form->options['config'] = $configs;

        if (empty($column->dbType))
            $form->dbType = (new $form->widget)->dbType;


        return $form;
    }


    public function optionsFix($widget, $options, $bool = false)
    {

        $excludes = [
            'models',
            'datas',
            'ids',
            'attribute',
            'naming',
            'forms',
            'type',
        ];


        if (!class_exists($widget))
            return Az::warning('Class not exist');

        $configs = (new $widget())->_config;

        $items = [];
        foreach ($configs as $key => $value) {
            if (ZArrayHelper::isIn($key, $excludes))
                continue;

            if (ZArrayHelper::keyExists($key, $options))
                if ($options[$key] !== $value && !empty($options[$key]))
                    $items[$key] = $options[$key];
        }


        return $items;
    }

    #endregion

    #region Services


    private function baseClass($classname = null)
    {
        if ($classname !== null)
            $this->className = $classname;

        $clasfileName = "/{$this->className}Core.php";

        $classNameALL = self::Path['namespaceCoreAll'] . "{$this->className}Core";
        $className = self::Path['namespaceCore'] . "{$this->className}Core";

        $fNameALL = \Yii::getAlias(self::Path['pathCoreAll']) . $clasfileName;
        $fName = \Yii::getAlias(self::Path['pathCore']) . $clasfileName;
        $baseClassName = null;
        if (file_exists($fNameALL))
            $baseClassName = $classNameALL;

        if (file_exists($fName))
            $baseClassName = $className;

        if ($baseClassName === null)
            $baseClassName = ZActiveRecord::class;

        return $baseClassName;
    }

    #endregion

    #region PRIVATES FIX


    private function widgetConfig($form)
    {

        $configs = ZArrayHelper::getValue($form->options, 'config');
        if (!empty($configs))
            $configs = $this->optionsFix($form->widget, $configs);

        return $configs;
    }


    private function rulesFix($rules)
    {

        foreach ($rules as $key => $rule) {
            if (!is_array($rule))
                $items[] = [$rule];
            else
                $items[] = $rule;
        }

        return $items;
    }


    private function configsFix($configs, $attrs)
    {

        $must = get_object_vars($configs);

        foreach ($attrs as $key => $value) {

            if (!$value)
                continue;

            if (ZArrayHelper::keyExists($key, $must) && $configs->$key !== $value)
                $configs->$key = $value;

        }

        return $configs;

    }


    #endregion


}

