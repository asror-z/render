<!DOCTYPE html>
<!-- saved from url=(0018)https://markjs.io/ -->
<html lang="en"><!--
/*!***************************************************
 * -
 *    Copyright (c) 2016–2018, Julian Kühnel
 *         All Rights Reserved
 *
 *    App: mark.js-website
 *    Version: 1.0.0
 *    Build time: Wed, 03 Jan 2018 22:56:45 GMT
 *    Contributors: - Julian Kühnel
 * -
 *****************************************************/
--><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta http-equiv="X-UA-Compatible" content="IE=EDGE"><title>mark.js – JavaScript keyword highlight</title><meta name="description" content="Search term highlighting intended for every use case. Can be used with plain JavaScript or as jQuery plugin."><meta name="author" content="Julian Kühnel"><meta name="robots" content="index, follow"><meta name="viewport" content="width=device-width,initial-scale=1,minimum-scale=1,maximum-scale=1,user-scalable=no"><script async="" src="./html_files/analytics.js.download"></script><script src="./html_files/iJtEuoaE8SblfZHiK-MK_iY62v0.js.download"></script><link rel="apple-touch-icon" sizes="57x57" href="https://markjs.io/assets/images/favicons/apple-touch-icon-57x57.png"><link rel="apple-touch-icon" sizes="60x60" href="https://markjs.io/assets/images/favicons/apple-touch-icon-60x60.png"><link rel="apple-touch-icon" sizes="72x72" href="https://markjs.io/assets/images/favicons/apple-touch-icon-72x72.png"><link rel="apple-touch-icon" sizes="76x76" href="https://markjs.io/assets/images/favicons/apple-touch-icon-76x76.png"><link rel="apple-touch-icon" sizes="114x114" href="https://markjs.io/assets/images/favicons/apple-touch-icon-114x114.png"><link rel="apple-touch-icon" sizes="120x120" href="https://markjs.io/assets/images/favicons/apple-touch-icon-120x120.png"><link rel="apple-touch-icon" sizes="144x144" href="https://markjs.io/assets/images/favicons/apple-touch-icon-144x144.png"><link rel="apple-touch-icon" sizes="152x152" href="https://markjs.io/assets/images/favicons/apple-touch-icon-152x152.png"><link rel="apple-touch-icon" sizes="180x180" href="https://markjs.io/assets/images/favicons/apple-touch-icon-180x180.png"><link rel="icon" type="image/png" href="https://markjs.io/assets/images/favicons/favicon-32x32.png" sizes="32x32"><link rel="icon" type="image/png" href="https://markjs.io/assets/images/favicons/favicon-194x194.png" sizes="194x194"><link rel="icon" type="image/png" href="https://markjs.io/assets/images/favicons/favicon-96x96.png" sizes="96x96"><link rel="icon" type="image/png" href="https://markjs.io/assets/images/favicons/android-chrome-192x192.png" sizes="192x192"><link rel="icon" type="image/png" href="https://markjs.io/assets/images/favicons/favicon-16x16.png" sizes="16x16"><link rel="manifest" href="https://markjs.io/assets/images/favicons/manifest.json"><link rel="shortcut icon" href="https://markjs.io/assets/images/favicons/favicon.ico"><meta name="apple-mobile-web-app-title" content="mark.js"><meta name="application-name" content="mark.js"><meta name="msapplication-TileColor" content="#ffc40d"><meta name="msapplication-TileImage" content="/assets/images/favicons/mstile-144x144.png"><meta name="msapplication-config" content="/assets/images/favicons/browserconfig.xml"><meta name="theme-color" content="#ffffff"><link rel="stylesheet" type="text/css" href="./html_files/app.min.css"></head><body class="no-touch"><div class="page-container"><header class="navbar navbar-fixed-top"><div class="container"><div class="navbar-header"><button class="navbar-toggle" type="button" data-toggle="collapse" data-target="#nav-collapse"><span class="sr-only">Toggle navigation</span> <span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span></button> <a class="navbar-brand" href="https://markjs.io/"><span class="logo">mark.js</span></a></div><div class="collapse navbar-collapse navbar-right" id="nav-collapse"><ul class="nav navbar-nav"><li><a href="https://markjs.io/configurator.html">Configurator</a></li><li><a href="https://github.com/julmot/mark.js/">View on GitHub</a></li><li><a href="https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/julmot/mark.js/tree/master/dist" data-download="true">Download</a></li></ul></div></div></header><div class="jumbotron"><div class="container"><h1><span class="logo-overlay"></span> <span class="logo">mark.js</span> JavaScript keyword highlighter</h1><h2>Search term highlighting intended for every use case. Can be used with plain JavaScript or as jQuery plugin.</h2><div class="github-buttons"><iframe src="./html_files/github-btn.html" frameborder="0" scrolling="0" width="160px" height="30px"></iframe></div></div></div><div class="container"><div class="row"><nav class="hidden-xs col-sm-4 col-md-3"><ul class="nav nav-pills nav-stacked affix-top" style="width: 263px;"><li class=""><a href="https://markjs.io/#getting-to-know-markjs">1. Getting to Know mark.js</a></li><li><a href="https://markjs.io/#examples">2. Examples</a></li><li><a href="https://markjs.io/#getting-started">3. Getting Started</a><ul class="nav"><li><a href="https://markjs.io/#download">3.1 Download</a></li><li><a href="https://markjs.io/#cdn">3.2 CDN</a></li><li><a href="https://markjs.io/#integration">3.3 Integration</a></li><li><a href="https://markjs.io/#styling">3.4 Styling</a></li><li><a href="https://markjs.io/#plugins">3.5 Plugins</a></li></ul></li><li><a href="https://markjs.io/#api">4. API</a><ul class="nav"><li><a href="https://markjs.io/#general">4.1 General</a></li><li><a href="https://markjs.io/#mark">4.2 mark()</a></li><li><a href="https://markjs.io/#markregexp">4.3 markRegExp()</a></li><li><a href="https://markjs.io/#markranges">4.4 markRanges()</a></li><li><a href="https://markjs.io/#unmark">4.5 unmark()</a></li></ul></li><li><a href="https://markjs.io/#compatibility">5. Compatibility</a></li><li><a href="https://markjs.io/#tutorials">6. Tutorials</a><ul class="nav"><li><a href="https://markjs.io/#element-and-class-name">6.1 Element and Class Name</a></li><li><a href="https://markjs.io/#exclude">6.2 Exclude</a></li><li><a href="https://markjs.io/#separate-word-search">6.3 Separate Word Search</a></li><li><a href="https://markjs.io/#accuracy">6.4 Accuracy</a></li><li><a href="https://markjs.io/#diacritics">6.5 Diacritics</a></li><li><a href="https://markjs.io/#synonyms">6.6 Synonyms</a></li><li><a href="https://markjs.io/#filter">6.7 Filter</a></li><li><a href="https://markjs.io/#across-elements">6.8 Across Elements</a></li></ul></li><li><a href="https://markjs.io/#contribute">7. Contribute</a></li></ul></nav><main class="col-xs-12 col-sm-8 col-md-9"><section><a id="getting-to-know-markjs"></a><h2>1. Getting to Know mark.js</h2><article><p>mark.js is a text highlighter written in JavaScript. It can be used to dynamically mark search terms or custom regular expressions and offers you built-in options like diacritics support, separate word search, custom synonyms, iframes support, custom filters, accuracy definition, custom element, custom class name and more.</p></article></section><section><a id="examples"></a><h2>2. Examples</h2><article><p>Have a look at the <a href="https://markjs.io/configurator.html">Configurator</a> to see mark.js in action.</p><p>Other examples:</p><ul><li><a href="https://jsfiddle.net/julmot/vpav6tL1/">Basic jQuery example</a></li><li><a href="https://jsfiddle.net/julmot/hdyLpy37/">Basic example with pure JavaScript</a></li><li><a href="https://jsfiddle.net/julmot/1at87fnu/">Table column highlighting</a></li><li><a href="https://jsfiddle.net/julmot/bs69vcqL/">List filtering and highlighting</a></li><li><a href="https://jsfiddle.net/julmot/973gdh8g/">Search bar with jump to matches</a></li><li><a href="https://jsfiddle.net/julmot/ova17daa/">Custom regular expression highlighting</a></li><li><a href="https://jsfiddle.net/julmot/bL6bb5oo/">URL Referrer highlighting</a></li><li><a href="https://jsfiddle.net/julmot/hexomvbL/">Animated highlighting</a></li></ul></article></section><section><a id="getting-started"></a><h2>3. Getting Started</h2><article><a id="download"></a><h3>3.1 Download</h3><p>You can either download the package using <a href="https://npmjs.com/">npm</a> by running:</p><pre><code class="hljs stylus">$ npm install <span class="hljs-selector-tag">mark</span><span class="hljs-selector-class">.js</span> --save-dev
</code></pre><p>Or using <a href="https://bower.io/">Bower</a>:</p><pre><code class="hljs stylus">$ bower install <span class="hljs-selector-tag">mark</span><span class="hljs-selector-class">.js</span> --save-dev
</code></pre><p>Or download the package <a href="https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/julmot/mark.js/tree/master/dist">manually</a>.</p></article><article><a id="cdn"></a><h3>3.2 CDN</h3><p>If you prefer using a <a href="https://en.wikipedia.org/wiki/Content_delivery_network">CDN</a> instead of downloading, mark.js is available on:</p><ul><li><a href="https://cdnjs.com/libraries/mark.js/">cdnjs</a></li><li><a href="https://www.jsdelivr.com/package/npm/mark.js?path=dist">jsdelivr</a></li></ul></article><article><a id="integration"></a><h3>3.3 Integration</h3><p>mark.js ships with a few files – when using Bower they're located in <code>./dist/</code>:</p><ul><li>Files for usage with pure JavaScript:<ul><li><code>mark.js</code> - Uncompressed ES5</li><li><code>mark.min.js</code> - Compressed ES5 (<strong>recommended</strong>)</li><li><code>mark.es6.js</code> - Uncompressed ES6</li><li><code>mark.es6.min.js</code> - Compressed ES6</li></ul></li><li>Files for usage as jQuery plugin:<ul><li><code>jquery.mark.js</code> - Uncompressed ES5</li><li><code>jquery.mark.min.js</code> - Compressed ES5 (<strong>recommended</strong>)</li><li><code>jquery.mark.es6.js</code> - Uncompressed ES6</li><li><code>jquery.mark.es6.min.js</code> - Compressed ES6</li></ul></li></ul><p>If you don't know what ES5 or ES6 (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction">ECMAScript</a>) is, then simply go ahead with a ES5 file as it might be in the JavaScript syntax you are using in your project.</p><p>After you have chosen the appropriate file, you need to embed it, e.g. as follows:</p><pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"vendor/mark.js/dist/mark.min.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre><p>Alternatively you can load it with AMD (<a href="http://requirejs.org/">RequireJS</a>) or CommonJS.</p><p><strong>Note</strong>: mark.js requires UTF-8 encoding. If your server or environment serves files with ASCII, you can workaround this behavior by using the <a href="https://www.w3schools.com/tags/att_script_charset.asp"><code>charset</code> attribute</a> on above named <code>&lt;script&gt;</code> tag, e.g.:</p><pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"vendor/mark.js/dist/mark.min.js"</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
</code></pre></article><article><a id="styling"></a><h3>3.4 Styling</h3><p>mark.js will wrap matches with a specified element and optionally with an assigned class. When not changing the default element <code>mark</code>, browsers will ensure that it looks highlighted by default. However, you may want to customize the style of it. This can be done using e.g. the following CSS:</p><pre><code class="lang-css hljs"><span class="hljs-selector-tag">mark</span>{
    <span class="hljs-attribute">background</span>: orange;
    <span class="hljs-attribute">color</span>: black;
}
</code></pre><p>If you've customized the default element or class, make sure to modify the selector.</p></article><article><a id="plugins"></a><h3>3.5 Plugins</h3><p>The following plugins are available to integrate mark.js into other components:</p><ul><li><a href="https://datatables.net/">DataTables</a>: <a href="https://github.com/julmot/datatables.mark.js/">datatables.mark.js</a></li><li><a href="https://mottie.github.io/tablesorter/">tablesorter</a>: <a href="https://mottie.github.io/tablesorter/docs/example-widget-mark.html">mark.js widget</a></li></ul></article></section><section><a id="api"></a><h2>4. API</h2><article><a id="general"></a><h3>4.1 General</h3><p><strong>JavaScript</strong></p><p>Each API method below can be called on an instance object. To initialize a new instance you have to use:</p><pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
</code></pre><p>The variable <code>context</code> defines where you want mark.js to search for matches. You can pass a single element (e.g. the return value of <code>document.getElementById(...)</code> or <code>document.querySelector(...)</code>), an array containing multiple single elements, or a NodeList (e.g. <code>document.querySelectorAll(...)</code>). Alternatively you can pass a string selector.</p><p>If for example you'd like to highlight matches in a div with a class <code>context</code> then you'd have to use:</p><pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">"div.context"</span>));
<span class="hljs-comment">// or</span>
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(<span class="hljs-string">"div.context"</span>);
</code></pre><p><strong>jQuery</strong></p><p>Each API method below can be called on every jQuery element, e.g. <code>$("div.test")</code>.</p></article><article><a id="mark"></a><h3>4.2 mark()</h3><p>A method to highlight custom search terms.</p><h4 id="syntax">Syntax</h4><p>JavaScript:</p><pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> context = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".context"</span>);
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
instance.mark(keyword [, options]);
</code></pre><p>jQuery:</p><pre><code class="lang-javascript hljs">$(<span class="hljs-string">".context"</span>).mark(keyword [, options]);
</code></pre><p><strong>Note</strong>: Even if this is a chaining method and therefore allows you to call further methods on the returning object, it's recommended to always use the <code>done</code> callback as mark.js works asynchronous.</p><h4 id="parameters">Parameters</h4><p><em>keyword</em></p><p>Type: <code>string</code> or <code>array</code> of <code>string</code></p><p>The keyword to be marked. Can also be an array with multiple keywords. Note that keywords will be escaped. If you need to mark unescaped keywords (e.g. containing a pattern), have a look at the <code>markRegExp()</code> method below.</p><p><em>options</em></p><p>Type: <code>object</code></p><p>Optional options:</p><div class="table-responsive"><table class="table table-bordered table-striped"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>element</td><td>string</td><td>"mark"</td><td>HTML element to wrap matches, e.g. <code>span</code></td></tr><tr><td>className</td><td>string</td><td>""</td><td>A class name that will be appended to <code>element</code></td></tr><tr><td>exclude</td><td>array</td><td>[ ]</td><td>An array with exclusion selectors. Matches inside these elements will be ignored. Example: <code>"filter": ["h1", ".ignore"]</code></td></tr><tr><td>separateWordSearch</td><td>boolean</td><td>true</td><td>Whether to search for each word separated by a blank instead of the complete term</td></tr><tr><td>accuracy</td><td>string or object</td><td>"partially"</td><td>Either one of the following string values:<ul><li>"partially": When searching for "lor" only "lor" inside "lorem" will be marked</li><li>"complementary": When searching for "lor" the whole word "lorem" will be marked</li><li>"exactly": When searching for "lor" only those exact words with a word boundary will be marked. In this example nothing inside "lorem". This value is equivalent to the previous option <i>wordBoundary</i></li></ul>Or an object containing two properties:<ul><li>"value": One of the above named string values</li><li>"limiters": A custom array of string limiters for accuracy "exactly" or "complementary". Read more about this <a href="https://markjs.io/#accuracy">in the tutorials section</a></li></ul></td></tr><tr><td>diacritics</td><td>boolean</td><td>true</td><td>If <a href="https://en.wikipedia.org/wiki/Diacritic">diacritic</a> characters should be matched. For example "piękny" would also match "piekny" and "doner" would also match "döner"</td></tr><tr><td>synonyms</td><td>object</td><td>{ }</td><td>An object with synonyms. The key will be a synonym for the value and the value for the key. Example: <code>"synonyms": {"one": "1"}</code> will add the synonym "1" for "one" and vice versa</td></tr><tr><td>iframes</td><td>boolean</td><td>false</td><td>Whether to search also inside iframes. If you don't have permissions to some iframes (e.g. because they have a <a href="https://en.wikipedia.org/wiki/Same-origin_policy">different origin</a>) they will be silently skipped. If you don't want to search inside specific iframes (e.g. facebook share), you can pass an <code>exclude</code> selector that matches these iframes</td></tr><tr><td>iframesTimeout</td><td>number</td><td>5000</td><td>The maximum ms to wait for a <code>load</code> event before skipping an iframe. Especially important when there's no internet connection or a browser "offline" mode is enabled and an iframe has an online <code>src</code> – then the <code>load</code> event is never fired</td></tr><tr><td>acrossElements</td><td>boolean</td><td>false</td><td>Whether to search for matches across elements</td></tr><tr><td>caseSensitive</td><td>boolean</td><td>false</td><td>Whether to search case sensitive</td></tr><tr><td>ignoreJoiners</td><td>boolean</td><td>false</td><td>Whether to also find matches that contain soft hyphen, zero width space, zero width non-joiner and zero width joiner. They're used to indicate a point for a line break where there isn't enough space to show the full word</td></tr><tr><td>ignorePunctuation</td><td>array</td><td>[ ]</td><td>An array of punctuation mark strings. These punctuation marks can be between any characters, e.g. setting this option to <code>["'"]</code> would match "Worlds", "World's" and "Wo'rlds". One or more apostrophes between the letters would still produce a match (e.g. "W'o''r'l'd's"). A typical setting for this option could be as follows: <code>":;.,-–—‒_(){}[]!'\"+=".split("")</code></td></tr><tr><td>wildcards</td><td>string</td><td>"disabled"</td><td>Set to any of the following string values:<ul><li>"disabled": Disable wildcard usage</li><li>"enabled": When searching for "lor?m", the "?" will match zero or one non-space character (e.g. "lorm", "loram", "lor3m", etc). When searching for "lor*m", the "*" will match zero or more non-space characters (e.g. "lorm", "loram", "lor123m", etc).</li><li>"withSpaces": When searching for "lor?m", the "?" will match zero or one space or non-space character (e.g. "lor m", "loram", etc). When searching for "lor*m", the "*" will match zero or more space or non-space characters (e.g. "lorm", "lore et dolor ipsum", "lor: m", etc).</li></ul></td></tr><tr><td>each</td><td>function</td><td></td><td>A callback for each marked element. Receives the marked DOM element as a parameter</td></tr><tr><td>filter</td><td>function</td><td></td><td>A callback to filter or limit matches. It will be called for each match and receives the following parameters:<ol><li>The text node which includes the match</li><li>The term that has been found</li><li>A counter indicating the total number of all marks at the time of the function call</li><li>A counter indicating the number of marks for the term</li></ol>The function must return false if the mark should be stopped, otherwise true</td></tr><tr><td>noMatch</td><td>function</td><td></td><td>A callback function that will be called when there are no matches. Receives the not found term as a parameter</td></tr><tr><td>done</td><td>function</td><td></td><td>A callback function after all marks are done. Receives the total number of marks as a parameter</td></tr><tr><td>debug</td><td>boolean</td><td>false</td><td>Set this option to <code>true</code> if you want to log messages</td></tr><tr><td>log</td><td>object</td><td>console</td><td>Log messages to a specific object (only if <code>debug</code> is true)</td></tr></tbody></table></div><h4 id="examples">Examples</h4><p><button data-toggle="collapse" data-target="#mark-code-overview-basic" class="btn btn-md btn-default">Basic example</button></p><div id="mark-code-overview-basic" class="collapse">JavaScript:<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> context = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".context"</span>); <span class="hljs-comment">// requires an element with class "context" to exist</span>
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
instance.mark(<span class="hljs-string">"test"</span>); <span class="hljs-comment">// will mark the keyword "test"</span>
</code></pre>jQuery:<pre><code class="lang-javascript hljs">$(<span class="hljs-string">".context"</span>).mark(<span class="hljs-string">"test"</span>); <span class="hljs-comment">// will mark the keyword "test", requires an element with class "context" to exist</span></code></pre></div><p><button data-toggle="collapse" data-target="#mark-code-overview-options" class="btn btn-md btn-default">Example with all above named options and their default values</button></p><div id="mark-code-overview-options" class="collapse">For both, JavaScript and jQuery:<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> options = {
    <span class="hljs-string">"element"</span>: <span class="hljs-string">"mark"</span>,
    <span class="hljs-string">"className"</span>: <span class="hljs-string">""</span>,
    <span class="hljs-string">"exclude"</span>: [],
    <span class="hljs-string">"separateWordSearch"</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-string">"accuracy"</span>: <span class="hljs-string">"partially"</span>,
    <span class="hljs-string">"diacritics"</span>: <span class="hljs-literal">true</span>,
    <span class="hljs-string">"synonyms"</span>: {},
    <span class="hljs-string">"iframes"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"iframesTimeout"</span>: <span class="hljs-number">5000</span>,
    <span class="hljs-string">"acrossElements"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"caseSensitive"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"ignoreJoiners"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"ignorePunctuation"</span>: [],
    <span class="hljs-string">"wildcards"</span>: <span class="hljs-string">"disabled"</span>,
    <span class="hljs-string">"each"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>)</span>{
        <span class="hljs-comment">// node is the marked DOM element</span>
    },
    <span class="hljs-string">"filter"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">textNode, foundTerm, totalCounter, counter</span>)</span>{
        <span class="hljs-comment">// textNode is the text node which contains the found term</span>
        <span class="hljs-comment">// foundTerm is the found search term</span>
        <span class="hljs-comment">// totalCounter is a counter indicating the total number of all marks</span>
        <span class="hljs-comment">//              at the time of the function call</span>
        <span class="hljs-comment">// counter is a counter indicating the number of marks for the found term</span>
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// must return either true or false</span>
    },
    <span class="hljs-string">"noMatch"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">term</span>)</span>{
        <span class="hljs-comment">// term is the not found term</span>
    },
    <span class="hljs-string">"done"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">counter</span>)</span>{
        <span class="hljs-comment">// counter is a counter indicating the total number of all marks</span>
    },
    <span class="hljs-string">"debug"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"log"</span>: <span class="hljs-built_in">window</span>.console
};
</code></pre>JavaScript:<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> context = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".context"</span>); <span class="hljs-comment">// requires an element with class "context" to exist</span>
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
instance.mark(<span class="hljs-string">"test"</span>, options); <span class="hljs-comment">// will mark the keyword "test"</span>
</code></pre>jQuery:<pre><code class="lang-javascript hljs">$(<span class="hljs-string">".context"</span>).mark(<span class="hljs-string">"test"</span>, options); <span class="hljs-comment">// will mark the keyword "test", requires an element with class "context" to exist</span></code></pre></div></article><article><a id="markregexp"></a><h3>4.3 markRegExp()</h3><p>A method to highlight custom <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions">regular expressions</a>.</p><h4 id="syntax">Syntax</h4><p>JavaScript:</p><pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> context = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".context"</span>);
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
instance.markRegExp(regexp [, options]);
</code></pre><p>jQuery:</p><pre><code class="lang-javascript hljs">$(<span class="hljs-string">".context"</span>).markRegExp(regexp [, options]);
</code></pre><p><strong>Note</strong>: Even if this is a chaining method and therefore allows you to call further methods on the returning object, it's recommended to always use the <code>done</code> callback as mark.js works asynchronous.</p><h4 id="parameters">Parameters</h4><p><em>regexp</em></p><p>Type: <code>RegExp</code></p><p>The regular expression to be marked. Example: <code>/Lor[^]?m/gmi</code>. Note that groups will be ignored and mark.js will always find all matches, regardless of the <code>g</code> flag.</p><p><em>options</em></p><p>Type: <code>object</code></p><p>Optional options:</p><div class="table-responsive"><table class="table table-bordered table-striped"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>element</td><td>string</td><td>"mark"</td><td>HTML element to wrap matches, e.g. <code>span</code></td></tr><tr><td>className</td><td>string</td><td>""</td><td>A class name that will be appended to <code>element</code></td></tr><tr><td>exclude</td><td>array</td><td>[ ]</td><td>An array with exclusion selectors. Matches inside these elements will be ignored. Example: <code>"filter": ["h1", ".ignore"]</code></td></tr><tr><td>iframes</td><td>boolean</td><td>false</td><td>Whether to search also inside iframes. If you don't have permissions to some iframes (e.g. because they have a <a href="https://en.wikipedia.org/wiki/Same-origin_policy">different origin</a>) they will be silently skipped. If you don't want to search inside specific iframes (e.g. facebook share), you can pass an <code>exclude</code> selector that matches these iframes</td></tr><tr><td>iframesTimeout</td><td>number</td><td>5000</td><td>The maximum ms to wait for a <code>load</code> event before skipping an iframe. Especially important when there's no internet connection or a browser "offline" mode is enabled and an iframe has an online <code>src</code> – then the <code>load</code> event is never fired</td></tr><tr><td>acrossElements</td><td>boolean</td><td>false</td><td>Whether to search for matches across elements</td></tr><tr><td>ignoreGroups</td><td>number</td><td>0</td><td>Indicates the number of matching groups to ignore in the replacement. Can be used e.g. to implement non-capturing lookbehind groups. Note that when the value is &gt; 0 (when groups should be ignored), it expects a total amount of groups in the RegExp of <code>ignoreGroups</code> + 1</td></tr><tr><td>each</td><td>function</td><td></td><td>A callback for each marked element. Receives the marked DOM element as a parameter</td></tr><tr><td>filter</td><td>function</td><td></td><td>A callback to filter or limit matches. It will be called for each match and receives the following parameters:<ol><li>The text node which includes the match</li><li>The matching string that has been found</li><li>A counter indicating the number of all marks</li></ol>The function must return false if the mark should be stopped, otherwise true</td></tr><tr><td>noMatch</td><td>function</td><td></td><td>A callback function that will be called when there are no matches. Receives the not found term as a parameter</td></tr><tr><td>done</td><td>function</td><td></td><td>A callback function after all marks are done. Receives the total number of marks as a parameter</td></tr><tr><td>debug</td><td>boolean</td><td>false</td><td>Set this option to <code>true</code> if you want to log messages</td></tr><tr><td>log</td><td>object</td><td>console</td><td>Log messages to a specific object (only if <code>debug</code> is true)</td></tr></tbody></table></div><h4 id="examples">Examples</h4><p><button data-toggle="collapse" data-target="#markregexp-code-overview-basic" class="btn btn-md btn-default">Basic example</button></p><div id="markregexp-code-overview-basic" class="collapse">JavaScript:<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> context = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".context"</span>); <span class="hljs-comment">// requires an element with class "context" to exist</span>
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
instance.markRegExp(<span class="hljs-regexp">/lorem/gmi</span>);
</code></pre>jQuery:<pre><code class="lang-javascript hljs">$(<span class="hljs-string">".context"</span>).markRegExp(<span class="hljs-regexp">/lorem/gmi</span>); <span class="hljs-comment">// requires an element with class "context" to exist</span></code></pre></div><p><button data-toggle="collapse" data-target="#markregexp-code-overview-options" class="btn btn-md btn-default">Example with all above named options and their default values</button></p><div id="markregexp-code-overview-options" class="collapse">For both, JavaScript and jQuery:<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> options = {
    <span class="hljs-string">"element"</span>: <span class="hljs-string">"mark"</span>,
    <span class="hljs-string">"className"</span>: <span class="hljs-string">""</span>,
    <span class="hljs-string">"exclude"</span>: [],
    <span class="hljs-string">"iframes"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"iframesTimeout"</span>: <span class="hljs-number">5000</span>,
    <span class="hljs-string">"acrossElements"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"ignoreGroups"</span>: <span class="hljs-number">0</span>,
    <span class="hljs-string">"each"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node</span>)</span>{
        <span class="hljs-comment">// node is the marked DOM element</span>
    },
    <span class="hljs-string">"filter"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">textNode, foundTerm, totalCounter</span>)</span>{
        <span class="hljs-comment">// textNode is the text node which contains the found term</span>
        <span class="hljs-comment">// foundTerm is the found search term</span>
        <span class="hljs-comment">// totalCounter is a counter indicating the total number of all marks</span>
        <span class="hljs-comment">//              at the time of the function call</span>
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// must return either true or false</span>
    },
    <span class="hljs-string">"noMatch"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">term</span>)</span>{
        <span class="hljs-comment">// term is the not found term</span>
    },
    <span class="hljs-string">"done"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">counter</span>)</span>{
        <span class="hljs-comment">// counter is a counter indicating the total number of all marks</span>
    },
    <span class="hljs-string">"debug"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"log"</span>: <span class="hljs-built_in">window</span>.console
};
</code></pre>JavaScript:<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> context = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".context"</span>); <span class="hljs-comment">// requires an element with class "context" to exist</span>
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
instance.markRegExp(<span class="hljs-regexp">/test/gmi</span>, options);
</code></pre>jQuery:<pre><code class="lang-javascript hljs">$(<span class="hljs-string">".context"</span>).markRegExp(<span class="hljs-regexp">/test/gmi</span>, options); <span class="hljs-comment">// requires an element with class "context" to exist</span></code></pre></div></article><article><a id="markranges"></a><h3>4.4 markRanges()</h3><p>A method to mark ranges with a start position and length. They will be applied to text nodes in the specified context.</p><h4 id="syntax">Syntax</h4><p>JavaScript:</p><pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> context = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".context"</span>);
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
instance.markRanges(ranges [, options]);
</code></pre><p>jQuery:</p><pre><code class="lang-javascript hljs">$(<span class="hljs-string">".context"</span>).markRanges(ranges [, options]);
</code></pre><p><strong>Note</strong>: Even if this is a chaining method and therefore allows you to call further methods on the returning object, it's recommended to always use the <code>done</code> callback as mark.js works asynchronous.</p><h4 id="parameters">Parameters</h4><p><em>ranges</em></p><p>Type: <code>array</code></p><p>An array of objects with a <code>start</code> and <code>length</code> property. Note that the start positions must be specified including whitespace characters.</p><p><em>options</em></p><p>Type: <code>object</code></p><p>Optional options:</p><div class="table-responsive"><table class="table table-bordered table-striped"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>element</td><td>string</td><td>"mark"</td><td>HTML element to wrap matches, e.g. <code>span</code></td></tr><tr><td>className</td><td>string</td><td>""</td><td>A class name that will be appended to <code>element</code></td></tr><tr><td>exclude</td><td>array</td><td>[ ]</td><td>An array with exclusion selectors. Matches inside these elements will be ignored. Example: <code>"filter": ["h1", ".ignore"]</code></td></tr><tr><td>iframes</td><td>boolean</td><td>false</td><td>Whether to search also inside iframes. If you don't have permissions to some iframes (e.g. because they have a [different origin][SOP]) they will be silently skipped. If you don't want to search inside specific iframes (e.g. facebook share), you can pass an <code>exclude</code> selector that matches these iframes</td></tr><tr><td>iframesTimeout</td><td>number</td><td>5000</td><td>The maximum ms to wait for a <code>load</code> event before skipping an iframe. Especially important when there's no internet connection or a browser "offline" mode is enabled and an iframe has an online <code>src</code> – then the <code>load</code> event is never fired</td></tr><tr><td>each</td><td>function</td><td></td><td>A callback for each marked element. Receives the marked DOM element and the corresponding range as a parameter</td></tr><tr><td>filter</td><td>function</td><td></td><td>A callback to filter or limit matches. It will be called for each match and receives the following parameters:<ol><li>The text node which includes the range</li><li>The current range</li><li>The extracted term from the matching range</li><li>A counter indicating the total number of all marks at the time of the function call</li></ol>The function must return false if the mark should be stopped, otherwise true</td></tr><tr><td>noMatch</td><td>function</td><td></td><td>A callback function that will be called when there are no matches. Receives the not found range as a parameter</td></tr><tr><td>done</td><td>function</td><td></td><td>A callback function after all marks are done. Receives the total number of marks as a parameter</td></tr><tr><td>debug</td><td>boolean</td><td>false</td><td>Set this option to <code>true</code> if you want to log messages</td></tr><tr><td>log</td><td>object</td><td>console</td><td>Log messages to a specific object (only if <code>debug</code> is true)</td></tr></tbody></table></div><h4 id="examples">Examples</h4><p><button data-toggle="collapse" data-target="#markranges-code-overview-basic" class="btn btn-md btn-default">Basic example</button></p><div id="markranges-code-overview-basic" class="collapse">JavaScript:<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> context = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".context"</span>); <span class="hljs-comment">// requires an element with class "context" to exist</span>
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
instance.markRanges([{
    <span class="hljs-attr">start</span>: <span class="hljs-number">15</span>,
    <span class="hljs-attr">length</span>: <span class="hljs-number">5</span>
}, {
    <span class="hljs-attr">start</span>: <span class="hljs-number">25</span>:
    length: <span class="hljs-number">8</span>
}]); <span class="hljs-comment">// marks matches with ranges 15-20 and 25-33</span>
</code></pre>jQuery:<pre><code class="lang-javascript hljs">$(<span class="hljs-string">".context"</span>).markRanges([{
    <span class="hljs-attr">start</span>: <span class="hljs-number">15</span>,
    <span class="hljs-attr">length</span>: <span class="hljs-number">5</span>
}, {
    <span class="hljs-attr">start</span>: <span class="hljs-number">25</span>:
    length: <span class="hljs-number">8</span>
}]); <span class="hljs-comment">// marks matches with ranges 15-20 and 25-33</span>
</code></pre></div><p><button data-toggle="collapse" data-target="#markranges-code-overview-options" class="btn btn-md btn-default">Example with all above named options and their default values</button></p><div id="markranges-code-overview-options" class="collapse">For both, JavaScript and jQuery:<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> options = {
    <span class="hljs-string">"element"</span>: <span class="hljs-string">"mark"</span>,
    <span class="hljs-string">"className"</span>: <span class="hljs-string">""</span>,
    <span class="hljs-string">"exclude"</span>: [],
    <span class="hljs-string">"iframes"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"iframesTimeout"</span>: <span class="hljs-number">5000</span>,
    <span class="hljs-string">"each"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node, range</span>)</span>{
        <span class="hljs-comment">// node is the marked DOM element</span>
        <span class="hljs-comment">// range is the corresponding range</span>
    },
    <span class="hljs-string">"filter"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">textNode, range, term, counter</span>)</span>{
        <span class="hljs-comment">// textNode is the text node which contains the found term</span>
        <span class="hljs-comment">// range is the found range</span>
        <span class="hljs-comment">// term is the extracted term from the matching range</span>
        <span class="hljs-comment">// counter is a counter indicating the number of marks for the found term</span>
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// must return either true or false</span>
    },
    <span class="hljs-string">"noMatch"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">range</span>)</span>{
        <span class="hljs-comment">// the not found range</span>
    },
    <span class="hljs-string">"done"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">counter</span>)</span>{
        <span class="hljs-comment">// counter is a counter indicating the total number of all marks</span>
    },
    <span class="hljs-string">"debug"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"log"</span>: <span class="hljs-built_in">window</span>.console
};
</code></pre>JavaScript:<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> context = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".context"</span>); <span class="hljs-comment">// requires an element with class "context" to exist</span>
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
instance.markRanges([{
    <span class="hljs-attr">start</span>: <span class="hljs-number">15</span>,
    <span class="hljs-attr">length</span>: <span class="hljs-number">5</span>
}, {
    <span class="hljs-attr">start</span>: <span class="hljs-number">25</span>:
    length: <span class="hljs-number">8</span>
}], options);
</code></pre>jQuery:<pre><code class="lang-javascript hljs">$(<span class="hljs-string">".context"</span>).markRanges([{
    <span class="hljs-attr">start</span>: <span class="hljs-number">15</span>,
    <span class="hljs-attr">length</span>: <span class="hljs-number">5</span>
}, {
    <span class="hljs-attr">start</span>: <span class="hljs-number">25</span>:
    length: <span class="hljs-number">8</span>
}], options);
</code></pre></div></article><article><a id="unmark"></a><h3>4.5 unmark()</h3><p>A method to remove highlights created by mark.js.</p><h4 id="syntax">Syntax</h4><p>JavaScript:</p><pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> context = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".context"</span>);
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
instance.unmark(options);
</code></pre><p>jQuery:</p><pre><code class="lang-javascript hljs">$(<span class="hljs-string">".context"</span>).unmark(options);
</code></pre><p><strong>Note</strong>: Even if this is a chaining method and therefore allows you to call further methods on the returning object, it's recommended to always use the <code>done</code> callback as mark.js works asynchronous.</p><h4 id="parameters">Parameters</h4><p><em>options</em></p><p>Type: <code>object</code></p><p>Optional options:</p><div class="table-responsive"><table class="table table-bordered table-striped"><thead><tr><th>Option</th><th>Type</th><th>Default</th><th>Description</th></tr></thead><tbody><tr><td>element</td><td>string</td><td>""</td><td>Will remove only marked elements with this specific element</td></tr><tr><td>className</td><td>string</td><td>""</td><td>Will remove only marked elements with this specific class name</td></tr><tr><td>exclude</td><td>array</td><td>[ ]</td><td>An array with exclusion selectors. These elements will be ignored. Example: <code>"filter": ["h1", ".ignore"]</code></td></tr><tr><td>iframes</td><td>boolean</td><td>false</td><td>Whether to search also inside iframes. If you don't have permissions to some iframes (e.g. because they have a <a href="https://en.wikipedia.org/wiki/Same-origin_policy">different origin</a>) they will be silently skipped. If you don't want to search inside specific iframes (e.g. facebook share), you can pass an <code>exclude</code> selector that matches these iframes</td></tr><tr><td>iframesTimeout</td><td>number</td><td>5000</td><td>The maximum ms to wait for a <code>load</code> event before skipping an iframe. Especially important when there's no internet connection or a browser "offline" mode is enabled and an iframe has an online <code>src</code> – then the <code>load</code> event is never fired</td></tr><tr><td>done</td><td>function</td><td></td><td>A callback function after all marked elements were removed</td></tr><tr><td>debug</td><td>boolean</td><td>false</td><td>Set this option to <code>true</code> if you want to log messages</td></tr><tr><td>log</td><td>object</td><td>console</td><td>Log messages to a specific object (only if <code>debug</code> is true)</td></tr></tbody></table></div><p><button data-toggle="collapse" data-target="#unmark-code-overview-basic" class="btn btn-md btn-default">Basic example</button></p><div id="unmark-code-overview-basic" class="collapse">JavaScript:<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> context = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".context"</span>); <span class="hljs-comment">// requires an element with class "context" to exist</span>
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
instance.unmark();
</code></pre>jQuery:<pre><code class="lang-javascript hljs">$(<span class="hljs-string">".context"</span>).unmark(); <span class="hljs-comment">// requires an element with class "context" to exist</span></code></pre></div><p><button data-toggle="collapse" data-target="#unmark-code-overview-options" class="btn btn-md btn-default">Example with all above named options and their default values</button></p><div id="unmark-code-overview-options" class="collapse">For both, JavaScript and jQuery:<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> options = {
    <span class="hljs-string">"element"</span>: <span class="hljs-string">""</span>,
    <span class="hljs-string">"className"</span>: <span class="hljs-string">""</span>,
    <span class="hljs-string">"exclude"</span>: [],
    <span class="hljs-string">"iframes"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"iframesTimeout"</span>: <span class="hljs-number">5000</span>,
    <span class="hljs-string">"done"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)</span>{},
    <span class="hljs-string">"debug"</span>: <span class="hljs-literal">false</span>,
    <span class="hljs-string">"log"</span>: <span class="hljs-built_in">window</span>.console
};
</code></pre>JavaScript:<pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> context = <span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">".context"</span>); <span class="hljs-comment">// requires an element with class "context" to exist</span>
<span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(context);
instance.unmark(options);
</code></pre>jQuery:<pre><code class="lang-javascript hljs">$(<span class="hljs-string">".context"</span>).unmark(options); <span class="hljs-comment">// requires an element with class "context" to exist</span></code></pre></div></article></section><section><a id="compatibility"></a><h2>5. Compatibility</h2><article><p>mark.js works in all modern browsers.<br>It is intensively tested in:</p><ul><li>Firefox (30+)</li><li>Chrome (30+)</li><li>Safari (7+)</li><li>Edge (13+)</li><li>IE (9+)</li></ul><p><img src="./html_files/firefox_3.5-22_48x48.png" alt="Firefox"> <img src="./html_files/chrome_12-48_48x48.png" alt="Chrome"> <img src="./html_files/safari_1-7_48x48.png" alt="Safari"> <img src="./html_files/edge_48x48.png" alt="Edge"> <img src="./html_files/internet-explorer_9-11_48x48.png" alt="IE9-11"></p></article></section><section><a id="tutorials"></a><h2>6. Tutorials</h2><article><p>Below is an explanation of options that might not be self explanatory.</p></article><article><a id="element-and-class-name"></a><h3>6.1 Element and Class Name</h3><p>You may ask yourself how mark.js works generally or how to wrap matches with a custom element and class name. Take this simple DOM fragment as an example:</p><pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"context"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>My text content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre><p>When you're calling mark.js on <code>div.context</code> – whether by <code>mark()</code> or by <code>markRegExp()</code> – it will find matches and wraps them with a defined element (tag name) and optionally with a class assigned to that element. So assuming we'd like to highlight "text" with a <code>span</code> tag and a class <code>highlight</code> assigned, then this could be done e.g. as follows:</p><p>With JavaScript:</p><pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">"div.context"</span>));
instance.mark(<span class="hljs-string">"text"</span>, {
    <span class="hljs-string">"element"</span>: <span class="hljs-string">"span"</span>,
    <span class="hljs-string">"className"</span>: <span class="hljs-string">"highlight"</span>
});
</code></pre><p>With jQuery:</p><pre><code class="lang-javascript hljs">$(<span class="hljs-string">"div.context"</span>).mark(<span class="hljs-string">"text"</span>, {
    <span class="hljs-string">"element"</span>: <span class="hljs-string">"span"</span>,
    <span class="hljs-string">"className"</span>: <span class="hljs-string">"highlight"</span>
});
</code></pre><p>The generated DOM fragment would then look like:</p><pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"context"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>My <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"highlight"</span>&gt;</span>text<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> content<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre></article><article><a id="exclude"></a><h3>6.2 Exclude</h3><p>When having a context that contains multiple elements and you need to ignore matches in some of them, the option <code>exclude</code> may be worth gold. You can pass an array of exclusion selectors and matches within these selectors will be ignored from highlighting.</p><p>Assuming you have the following DOM fragment:</p><pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"context"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">article</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">header</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Article Text Headline<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"byline"</span>&gt;</span>
                <span class="hljs-tag">&lt;<span class="hljs-name">address</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"author"</span>&gt;</span>
                    By <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"author"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"demo/link"</span>&gt;</span>John Doe<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span>
                <span class="hljs-tag">&lt;/<span class="hljs-name">address</span>&gt;</span>
                on
                <span class="hljs-tag">&lt;<span class="hljs-name">time</span> <span class="hljs-attr">pubdate</span> <span class="hljs-attr">datetime</span>=<span class="hljs-string">"2016-30-05"</span> <span class="hljs-attr">title</span>=<span class="hljs-string">"May 30th, 2016"</span>&gt;</span>5/30/16<span class="hljs-tag">&lt;/<span class="hljs-name">time</span>&gt;</span>
            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">header</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"article-content"</span>&gt;</span>
            Article text content
        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">article</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre><p>And you want to highlight all "text" matches, but only in the actual article content. Then you can either initialize mark.js directly on the <code>div</code> containing the article's content (in this case <code>div.article-content</code>), or specify a <code>exclude</code> array matching the elements that should be ignored, e.g. as follows:</p><p>With JavaScript:</p><pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> instance = <span class="hljs-keyword">new</span> Mark(<span class="hljs-built_in">document</span>.querySelector(<span class="hljs-string">"div.context"</span>));
instance.mark(<span class="hljs-string">"text"</span>, {
    <span class="hljs-string">"exclude"</span>: [
        <span class="hljs-string">"h1"</span>,
        <span class="hljs-string">".byline *"</span>
    ]
});
</code></pre><p>With jQuery:</p><pre><code class="lang-javascript hljs">$(<span class="hljs-string">"div.context"</span>).mark(<span class="hljs-string">"text"</span>, {
    <span class="hljs-string">"exclude"</span>: [
        <span class="hljs-string">"h1"</span>,
        <span class="hljs-string">".byline *"</span>
    ]
});
</code></pre><p>This would ignore matches inside <code>&lt;h1&gt;</code> elements and those having a class <code>byline</code> assigned.</p></article><article><a id="separate-word-search"></a><h3>6.3 Separate Word Search</h3><p><em>Constraint: Only available in the <code>mark()</code> method</em></p><p>Regardless of whether you are highlighting an array of search terms or just a single one, it makes sense to search for each word separately. Assuming you have a search term "lorem ipsum dolor", then this option will make mark.js search for "lorem", "ipsum" and "dolor" separately.</p></article><article><a id="accuracy"></a><h3>6.4 Accuracy</h3><p><em>Constraint: Only available in the <code>mark()</code> method</em></p><p>As the name suggests, the <code>accuracy</code> option allows you to specify the accuracy of mark.js.</p><p>To demonstrate this, we're taking the following DOM fragment as a basis for all examples below:</p><pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"context"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>highlight high<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre><p>By default, the provided search term will be highlighted, regardless if it's a substring of a word or a own standing one. This option value is called <code>partially</code>. When searching for "high" inside above named DOM fragment, the following will be generated:</p><pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"context"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>high<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span>light <span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>high<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre><p>However, there might be cases where you want to ignore partial matches and only highlight matches for entire words with a word boundary (see <a href="http://grammar.about.com/od/tz/g/Word-Boundary.htm">what is a word boundary</a>). Then the option value <code>exactly</code> is what you're looking for. When searching for "high", only whole words "high" will be highlighted:</p><pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"context"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>highlight <span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>high<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre><p>Last but not least, the option value <code>complementary</code> will complement matches. When searching for "high" inside above named DOM fragment, the following will be generated:</p><pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"context"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>highlight<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">mark</span>&gt;</span>high<span class="hljs-tag">&lt;/<span class="hljs-name">mark</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre><p>The option value <code>complementary</code> highlights the search term and all surrounding characters until a blank or the start/end of the search context occurs. The option value <code>exactly</code> highlights only whole words that match the specified search term separated by a blank or the start/end of the search context.</p><p>But there might be cases where you might want to use accuracy <code>exactly</code>, but highlight also words that are followed by punctuation marks e.g. a <code>,</code> or a <code>.</code>. Or when using accuracy <code>complementary</code> you might not want to highlight a <code>,</code> or a <code>.</code> following a word. In these cases you can pass an array of custom limiters, e.g. as follows:</p><pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> options = {
    <span class="hljs-string">"accuracy"</span>: {
        <span class="hljs-string">"value"</span>: <span class="hljs-string">"exactly"</span>,
        <span class="hljs-string">"limiters"</span>: [<span class="hljs-string">","</span>, <span class="hljs-string">"."</span>]
    }
};
</code></pre><p>This will highlight words that are preceded and followed by a blank, the end/start of the search context (default), <code>.</code> or <code>,</code> (custom).</p></article><article><a id="diacritics"></a><h3>6.5 Diacritics</h3><p>The option <code>diacritics</code> will map normal and <a href="https://en.wikipedia.org/wiki/Diacritic">diacritic characters</a>. Assuming you would like to highlight either "piekny" or "piękny" in the following DOM fragment:</p><pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"context"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>My piekny or piękny text<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre><p>Then both "piękny" and "piekny" will be highlighted.</p></article><article><a id="synonyms"></a><h3>6.6 Synonyms</h3><p>There might be cases where highlighting synonyms for words is helpful for users. Take "one" and "1" as an example. When a user searches for "one last todo", he might expect to highlight also "1 last todo". In German languages, you could also map <a href="https://en.wikipedia.org/wiki/Germanic_umlaut">umlauts</a>, e.g. "ü" with "ue" or "ö" with "oe".</p><p>The following example will add the synonym "1" for "one", "2" for "two" and vice versa:</p><pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> options = {
    <span class="hljs-string">"synonyms"</span>: {
        <span class="hljs-string">"one"</span>: <span class="hljs-string">"1"</span>,
        <span class="hljs-string">"two"</span>: <span class="hljs-string">"2"</span>
    }
};
</code></pre></article><article><a id="filter"></a><h3>6.7 Filter</h3><p>The callback option <code>filter</code> can be used to filter highlights yourself. For example you could use it to limit highlights for specific words or generally to a specific amount. Or you could check if the match is inside a complex HTML construct which can not be expressed in a exclusion selector. Just be creative!</p><p>Here is an example to limit matches for a word "the" to a maximum of 10:</p><pre><code class="lang-javascript hljs"><span class="hljs-keyword">var</span> options = {
    <span class="hljs-string">"filter"</span>: <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">node, term, totalCounter, counter</span>)</span>{
        <span class="hljs-keyword">if</span>(term === <span class="hljs-string">"the"</span> &amp;&amp; counter &gt;= <span class="hljs-number">10</span>){
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        }
    }
};
</code></pre></article><article><a id="across-elements"></a><h3>6.8 Across Elements</h3><p>In some cases you need to highlight matches even if they occur in multiple elements. Let's say the following is the context where you'd like to highlight the search term "Highlight Text":</p><pre><code class="lang-html hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"context"</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>Highlight<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>
    Text
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span>
</code></pre><p>Then "Highlight" and "Text" are only highlighted when you haven't disabled <code>separateWordSearch</code>, as this will cause a separated search for words.<br>If you have disabled <code>separateWordSearch</code> nothing will be highlighted. This appears due to the fact that the two words included in the search term aren't located within the same text node. As you can see above "Highlight" is wrapped in a separate <code>&lt;b&gt;</code> element.<br>To make sure matches will be found across multiple elements – in this example across <code>&lt;b&gt;</code> – you'll have to enable the <code>acrossElements</code> option with the value <code>true</code>.</p><p>This option <code>acrossElements</code> will find matches even if the matching search term is located across multiple HTML elements or even iframes (if enabled).</p></article></section><section><a id="contribute"></a><h2>7. Contribute</h2><article><p>If you are having any questions, would like to submit a feature request or found a bug, please don't hesitate to <a href="https://github.com/julmot/mark.js/issues/new">open an issue</a> on GitHub!</p><p>Before submitting pull requests or creating issues, please read the <a href="https://github.com/julmot/mark.js/blob/master/CONTRIBUTING.md">guidelines for contributing</a>.</p></article></section></main></div></div><footer><div class="container"><div class="row"><div class="col-sm-6"><div class="col-inner"><p>©<script>var startYear=2016,year=(new Date).getFullYear();document.write(year>startYear?startYear+"–"+year:year)</script>2016–2019, <a href="https://github.com/julmot">Julian Kühnel</a>. All rights reserved.<br>The plugin mark.js itself is licensed under <a href="https://git.io/vwTVl">the MIT license</a></p></div></div><div class="col-sm-6"><div class="col-inner"><div class="github-buttons"><iframe src="./html_files/github-btn(1).html" frameborder="0" scrolling="0" width="160px" height="30px"></iframe></div></div></div></div></div></footer></div><div id="downloadModal" class="modal fade"><div class="modal-dialog"><div class="modal-content"><div class="modal-header"><button type="button" class="close" data-dismiss="modal">×</button><h4 class="modal-title">Download mark.js</h4></div><div class="modal-body text-center"><p class="lead">If mark.js made you happy then give a thanks with a star.</p><p><iframe src="./html_files/github-btn(2).html" frameborder="0" scrolling="0" width="160px" height="30px"></iframe></p></div><div class="modal-footer"><div class="row"><div class="col-xs-6"><button type="button" class="btn btn-primary pull-left" data-action="download">Download</button></div><div class="col-xs-6"><button type="button" class="btn btn-default pull-right" data-dismiss="modal">Close</button></div></div></div></div></div></div><noscript><div class="noscript">Please activate JavaScript in order to use all features of this website!</div></noscript><script type="text/javascript" src="./html_files/app.min.js.download"></script><iframe class="searchbar7133721812713254" src="./html_files/saved_resource.html" scrolling="no" style="border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; display: none; position: fixed; z-index: 2147483646; top: 0px; bottom: auto; left: auto; right: 0px; height: 40px; width: 100%;"></iframe><bdi class="searchbar7133721812713254" style="border: 1px solid rgb(176, 176, 176); margin: 0px; padding: 2px; outline: 0px; vertical-align: baseline; display: none; position: fixed; height: auto; width: auto; z-index: 2147483647; background: none rgb(255, 255, 255); max-height: none; max-width: none; min-height: 0px;"><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 0); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 0); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 0); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 0); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 0); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 0); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 0); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 0); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 0); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 0); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 255); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 255); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 255); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 255); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 255); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 255); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 255); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 255); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 255); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi><bdi style="display: block; border: 0px; margin: 0px; padding: 0px; outline: 0px; vertical-align: baseline; position: static; height: auto; width: auto; z-index: 2147483647; font: 20px sans-serif; text-align: left; color: rgb(0, 0, 255); background: none rgb(255, 255, 255); cursor: default; max-height: none; max-width: none; min-height: 0px; min-width: 0px; letter-spacing: normal; text-decoration: none; text-indent: 0px; text-transform: none; word-spacing: normal; overflow-wrap: normal; white-space: pre;"></bdi></bdi><iframe class="searchbar7133721812713254" src="./html_files/saved_resource(1).html" scrolling="no" style="border: 0px; margin: -186px 0px 0px -202px; padding: 0px; outline: 0px; vertical-align: baseline; display: none; position: fixed; top: 50%; left: 50%; z-index: 2147483645; border-radius: 5px;"></iframe></body><style>@media print{.searchbar7133721812713254{display:none!important;}}</style></html>